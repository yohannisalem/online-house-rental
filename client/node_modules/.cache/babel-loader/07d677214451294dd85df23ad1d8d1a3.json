{"ast":null,"code":"var _jsxFileName = \"/home/yohannis/Desktop/Final-Project OHR/client/src/components/maps/HousesLocation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport useSwr from \"swr\";\nimport axios from \"axios\";\nimport ReactMapGL, { Marker, FlyToInterpolator } from \"react-map-gl\";\nimport useSupercluster from \"use-supercluster\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nconst HousesLocation = () => {\n  _s();\n\n  const [houses, setHouses] = useState([]);\n  const [selectedHouse, setSelectedHouse] = useState(null);\n\n  const getMultipleFiles = async () => {\n    try {\n      const {\n        data\n      } = await axios.get('http://localhost:5000/api/getMultipleFiles');\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const getMultipleFilesList = async () => {\n    try {\n      const fileslist = await getMultipleFiles();\n      setHouses(fileslist);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getMultipleFilesList(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // const houses = data.data.map(house => {\n  //   return {\n  //     type: 'Feature',\n  //     geometry: {\n  //       type: 'Point',\n  //       coordinates: [\n  //         house.location.coordinates[0],\n  //         house.location.coordinates[1]\n  //       ]\n  //     },\n  //     properties: {\n  //       icon: 'house'\n  //     }\n  //   };\n  // });\n  // console.log(houses)\n\n  const [viewport, setViewport] = useState({\n    latitude: 9.034129,\n    longitude: 38.753259,\n    width: \"100vw\",\n    height: \"90vh\",\n    zoom: 12\n  });\n  const mapRef = useRef();\n  /* \n    const url =\n      \"https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10\";\n    const { data, error } = useSwr(url, { fetcher });\n    const crimes = data && !error ? data.slice(0, 2000) : []; */\n\n  const points = houses.map(house => ({\n    type: \"Feature\",\n    properties: {\n      icon: 'house'\n    },\n    geometry: {\n      type: \"Point\",\n      coordinates: [house.location.coordinates[0], house.location.coordinates[1]]\n    }\n  }));\n  console.log(points);\n  const bounds = mapRef.current ? mapRef.current.getMap().getBounds().toArray().flat() : null;\n  const {\n    clusters,\n    supercluster\n  } = useSupercluster({\n    points,\n    bounds,\n    zoom: viewport.zoom,\n    options: {\n      radius: 75,\n      maxZoom: 20\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ReactMapGL, { ...viewport,\n      maxZoom: 20,\n      mapboxApiAccessToken: 'pk.eyJ1IjoieW9oYW5uaXN3ZWRlIiwiYSI6ImNrc2x5dXNnYTA5cm4ybnAwdjM4MXI0MnAifQ.isUCw64XCoBGOAaEpDUPLw',\n      onViewportChange: newViewport => {\n        setViewport({ ...newViewport\n        });\n      },\n      ref: mapRef,\n      children: clusters.map(cluster => {\n        const [longitude, latitude] = cluster.geometry.coordinates;\n        const {\n          cluster: isCluster,\n          point_count: pointCount\n        } = cluster.properties;\n\n        if (isCluster) {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            latitude: latitude,\n            longitude: longitude,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cluster-marker\",\n              style: {\n                width: `${10 + pointCount / points.length * 20}px`,\n                height: `${10 + pointCount / points.length * 20}px`\n              },\n              onClick: () => {\n                const expansionZoom = Math.min(supercluster.getClusterExpansionZoom(cluster.id), 20);\n                setViewport({ ...viewport,\n                  latitude,\n                  longitude,\n                  zoom: expansionZoom,\n                  transitionInterpolator: new FlyToInterpolator({\n                    speed: 2\n                  }),\n                  transitionDuration: \"auto\"\n                });\n              },\n              children: pointCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this)\n          }, `cluster-${cluster.id}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          latitude: latitude,\n          longitude: longitude,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"crime-marker\",\n            onClick: e => {\n              e.preventDefault();\n              setSelectedHouse(cluster);\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/house.svg\",\n              alt: \"house doesn't render\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)\n        }, `crime-${cluster.properties.crimeId}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HousesLocation, \"lkVJxCCNU5M5GfqPuffTzYVNfIw=\", false, function () {\n  return [useSupercluster];\n});\n\n_c = HousesLocation;\nexport default HousesLocation;\n\nvar _c;\n\n$RefreshReg$(_c, \"HousesLocation\");","map":{"version":3,"sources":["/home/yohannis/Desktop/Final-Project OHR/client/src/components/maps/HousesLocation.js"],"names":["React","useState","useRef","useEffect","useSwr","axios","ReactMapGL","Marker","FlyToInterpolator","useSupercluster","fetcher","args","fetch","then","response","json","HousesLocation","houses","setHouses","selectedHouse","setSelectedHouse","getMultipleFiles","data","get","error","getMultipleFilesList","fileslist","console","log","viewport","setViewport","latitude","longitude","width","height","zoom","mapRef","points","map","house","type","properties","icon","geometry","coordinates","location","bounds","current","getMap","getBounds","toArray","flat","clusters","supercluster","options","radius","maxZoom","newViewport","cluster","isCluster","point_count","pointCount","length","expansionZoom","Math","min","getClusterExpansionZoom","id","transitionInterpolator","speed","transitionDuration","e","preventDefault","crimeId"],"mappings":"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","sourcesContent":["import React, { useState, useRef,useEffect } from \"react\";\nimport useSwr from \"swr\";\nimport axios from \"axios\";\nimport ReactMapGL, { Marker, FlyToInterpolator } from \"react-map-gl\";\nimport useSupercluster from \"use-supercluster\";\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nconst HousesLocation = () => {\n  const [houses,setHouses] = useState([])\n  const [selectedHouse, setSelectedHouse] = useState(null) \n  const getMultipleFiles = async () => {\n    try {\n      const { data } = await axios.get('http://localhost:5000/api/getMultipleFiles');\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  const getMultipleFilesList = async () => {\n    try {\n      const fileslist = await getMultipleFiles();\n      setHouses(fileslist);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  useEffect(() => {\n    getMultipleFilesList()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  \n\n  // const houses = data.data.map(house => {\n  //   return {\n  //     type: 'Feature',\n  //     geometry: {\n  //       type: 'Point',\n  //       coordinates: [\n  //         house.location.coordinates[0],\n  //         house.location.coordinates[1]\n  //       ]\n  //     },\n  //     properties: {\n  //       icon: 'house'\n  //     }\n  //   };\n  // });\n  // console.log(houses)\n  const [viewport, setViewport] = useState({\n    latitude: 9.034129,\n    longitude: 38.753259,\n    width: \"100vw\",\n    height: \"90vh\",\n    zoom: 12\n  });\n  const mapRef = useRef();\n/* \n  const url =\n    \"https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10\";\n  const { data, error } = useSwr(url, { fetcher });\n  const crimes = data && !error ? data.slice(0, 2000) : []; */\n  const points = houses.map(house => ({\n\n    type: \"Feature\",\n    properties: {\n      icon: 'house'\n    },\n    geometry: {\n      type: \"Point\",\n      coordinates: [\n        house.location.coordinates[0],\n        house.location.coordinates[1]\n       ]\n    }\n  }));\n  console.log(points)\n\n  const bounds = mapRef.current\n    ? mapRef.current\n      .getMap()\n      .getBounds()\n      .toArray()\n      .flat()\n    : null;\n\n  const { clusters, supercluster } = useSupercluster({\n    points,\n    bounds,\n    zoom: viewport.zoom,\n    options: { radius: 75, maxZoom: 20 }\n  });\n\n  return (\n    <div>\n      <ReactMapGL\n        {...viewport}\n        maxZoom={20}\n        mapboxApiAccessToken={'pk.eyJ1IjoieW9oYW5uaXN3ZWRlIiwiYSI6ImNrc2x5dXNnYTA5cm4ybnAwdjM4MXI0MnAifQ.isUCw64XCoBGOAaEpDUPLw'}\n        onViewportChange={newViewport => {\n          setViewport({ ...newViewport });\n        }}\n        ref={mapRef}\n      >\n        {clusters.map(cluster => {\n          const [longitude, latitude] = cluster.geometry.coordinates;\n          const {\n            cluster: isCluster,\n            point_count: pointCount\n          } = cluster.properties;\n\n          if (isCluster) {\n            return (\n              <Marker\n                key={`cluster-${cluster.id}`}\n                latitude={latitude}\n                longitude={longitude}\n              >\n                <div\n                  className=\"cluster-marker\"\n                  style={{\n                    width: `${10 + (pointCount / points.length) * 20}px`,\n                    height: `${10 + (pointCount / points.length) * 20}px`\n                  }}\n                  onClick={() => {\n                    const expansionZoom = Math.min(\n                      supercluster.getClusterExpansionZoom(cluster.id),\n                      20\n                    );\n\n                    setViewport({\n                      ...viewport,\n                      latitude,\n                      longitude,\n                      zoom: expansionZoom,\n                      transitionInterpolator: new FlyToInterpolator({\n                        speed: 2\n                      }),\n                      transitionDuration: \"auto\"\n                    });\n                  }}\n                >\n                  {pointCount}\n                </div>\n              </Marker>\n            );\n          }\n\n          return (\n            <Marker\n              key={`crime-${cluster.properties.crimeId}`}\n              latitude={latitude}\n              longitude={longitude}\n            >\n              <button className=\"crime-marker\" onClick={(e)=>{\n                e.preventDefault()\n                setSelectedHouse(cluster)\n\n              }}>\n                <img src=\"/house.svg\" alt=\"house doesn't render\" />\n              </button>\n            </Marker>\n          );\n        })}\n      </ReactMapGL>\n    </div>\n  )\n}\n\nexport default HousesLocation\n"]},"metadata":{},"sourceType":"module"}