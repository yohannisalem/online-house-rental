{"ast":null,"code":"var _jsxFileName = \"/home/yohannis/Desktop/min/Final-Project OHR/client/src/components/screen/RegisterHouses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react';\nimport storage from \"../../firebase\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RegisterHouses = () => {\n  _s();\n\n  const apiurl = '';\n  const [housedata, setHouseData] = useState(null);\n  /*   */\n\n  const [imageUrls, setImageUrls] = useState([]);\n  const [videoUrls, setVideoUrls] = useState([]);\n  const [files, setFiles] = useState([]);\n  const [video, setVideo] = useState(null); // const handleChange = (e) => {\n  //   const value = e.target.value;\n  //   setHouseData({ ...housedata, [e.target.name]: value });\n  // };\n\n  const handleChangeForImg = e => {\n    for (let i = 0; i < e.target.files.length; i++) {\n      const newImage = e.target.files[i];\n      newImage[\"id\"] = Math.random();\n      setFiles(prevState => [...prevState, newImage]);\n      console.log(files);\n    }\n  };\n  /* const createHouse = async (housedata) => {\n    const config = {\n      header: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/multipleFiles\", housedata,config); \n      console.log(res) \n    } catch (err) {\n      console.log(err)\n    }\n  };\n  */\n\n  /*  const upload = (items) => {\n     items.forEach((item) => {\n       var uploadTask = null;\n       console.log(item.files)\n       \n       const fileName = new Date().getTime() + item.label + item.file.name;\n       uploadTask = storage.ref(`/items/${fileName}`).put(item.file);\n       uploadTask.on(\n         \"state_changed\",\n         (snapshot) => {\n           const progress =\n             (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n           console.log(\"Upload is \" + progress + \"% done\");\n         },\n         (error) => {\n           console.log(error);\n         },\n         () => {\n           uploadTask.snapshot.ref.getDownloadURL().then((url) => {\n             \n             setHouseData((prev) => {\n               return [ ...prev,url ];\n             });\n           });\n         }\n       );\n     });\n   \n   }; */\n\n\n  const handleUpload = () => {\n    const promises = [];\n    const uploadTaskTwo = storage.ref(`images/${video.name}`).put(video);\n    uploadTaskTwo.on(\"state_changed\", snapshot => {\n      const progress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n    }, error => {\n      console.log(error);\n    }, async () => {\n      await storage.ref(\"images\").child(video.name).getDownloadURL().then(urls => {\n        setVideoUrls(prevState => [...prevState, urls]);\n      });\n    });\n    files.map(image => {\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\n      promises.push(uploadTask);\n      uploadTask.on(\"state_changed\", snapshot => {\n        const progress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n      }, error => {\n        console.log(error);\n      }, async () => {\n        await storage.ref(\"images\").child(image.name).getDownloadURL().then(urls => {\n          setImageUrls(prevState => [...prevState, urls]);\n        });\n      });\n    });\n    Promise.all(promises).then(() => alert(\"All images uploaded\")).catch(err => console.log(err));\n    console.log(imageUrls);\n    console.log(videoUrls);\n  };\n  /* const handleUpload = (e) => {\n    e.preventDefault();\n    var uploadTask = null;\n    const promises = [];\n    files.map((image) => {\n      uploadTask = storage.ref(`files/${image.name}`).put(image);\n      promises.push(uploadTask);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress =\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log(\"Upload is \" + progress + \"% done\");\n        },\n        (error) => {\n          console.log(error);\n        },\n        () => {\n          uploadTask.snapshot.ref.getDownloadURL().then((url) => {\n            setHouseData((prev) => {\n              return { ...prev, [image]: url };\n            });\n            });\n        }\n      );\n    });\n      uploadTask = storage.ref(`files/${video.name}`).put(video);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log(\"Upload is \" + progress + \"% done\");\n        },\n        (error) => {\n          console.log(error);\n        },\n        () => {\n          uploadTask.snapshot.ref.getDownloadURL().then((url) => {\n            setHouseData((prev) => {\n              return {...prev, [video]:url};\n            });\n          });\n        }\n      );\n    console.log(housedata)\n    createHouse(housedata);\n  }; */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"addProductTitle\",\n      children: \"New Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"addProductForm\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addProductItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"files\",\n          name: \"files\",\n          multiple: true,\n          onChange: handleChangeForImg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addProductItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"video\",\n          id: \"video\",\n          onChange: e => setVideo(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"addProductButton\",\n        onClick: handleUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterHouses, \"cz3Ab+E3miTaPvXgQQ4FspvhH9U=\");\n\n_c = RegisterHouses;\nexport default RegisterHouses;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterHouses\");","map":{"version":3,"sources":["/home/yohannis/Desktop/min/Final-Project OHR/client/src/components/screen/RegisterHouses.js"],"names":["React","useState","Button","Form","Grid","Header","Image","Message","Segment","storage","axios","RegisterHouses","apiurl","housedata","setHouseData","imageUrls","setImageUrls","videoUrls","setVideoUrls","files","setFiles","video","setVideo","handleChangeForImg","e","i","target","length","newImage","Math","random","prevState","console","log","handleUpload","promises","uploadTaskTwo","ref","name","put","on","snapshot","progress","round","bytesTransferred","totalBytes","error","child","getDownloadURL","then","urls","map","image","uploadTask","push","Promise","all","alert","catch","err"],"mappings":"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","sourcesContent":["import React,{useState} from 'react'\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react'\nimport storage from \"../../firebase\";\nimport axios from 'axios'\nconst RegisterHouses = () => {\n  const apiurl = ''\n  const [housedata,setHouseData]= useState(null)\n/*   */\n  const [imageUrls, setImageUrls] = useState([]);\n  const [videoUrls, setVideoUrls] = useState([]);\n  const [files, setFiles] = useState([]);\n  const [video, setVideo] = useState(null);\n\n  // const handleChange = (e) => {\n  //   const value = e.target.value;\n  //   setHouseData({ ...housedata, [e.target.name]: value });\n  // };\n  const handleChangeForImg= (e)=>{\n    for (let i = 0; i < e.target.files.length; i++) {\n      const newImage = e.target.files[i];\n      newImage[\"id\"] = Math.random();\n      setFiles((prevState) => [...prevState, newImage]);\n      console.log(files)\n    }\n\n  }\n  \n  /* const createHouse = async (housedata) => {\n    const config = {\n      header: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/multipleFiles\", housedata,config); \n      console.log(res) \n    } catch (err) {\n      console.log(err)\n    }\n  };\n */\n /*  const upload = (items) => {\n    items.forEach((item) => {\n      var uploadTask = null;\n      console.log(item.files)\n      \n      const fileName = new Date().getTime() + item.label + item.file.name;\n      uploadTask = storage.ref(`/items/${fileName}`).put(item.file);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log(\"Upload is \" + progress + \"% done\");\n        },\n        (error) => {\n          console.log(error);\n        },\n        () => {\n          uploadTask.snapshot.ref.getDownloadURL().then((url) => {\n            \n            setHouseData((prev) => {\n              return [ ...prev,url ];\n            });\n          });\n        }\n      );\n    });\n  \n  }; */\n  const handleUpload = () => {\n    const promises = [];\n    const uploadTaskTwo = storage.ref(`images/${video.name}`).put(video)\n    uploadTaskTwo.on(\n      \"state_changed\",\n      (snapshot) => {\n        const progress = Math.round(\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n        );\n      },\n      (error) => {\n        console.log(error);\n      },\n      async () => {\n        await storage\n          .ref(\"images\")\n          .child(video.name)\n          .getDownloadURL()\n          .then((urls) => {\n            setVideoUrls((prevState) => [...prevState, urls]);\n          });\n      }\n    );\n    files.map((image) => {\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\n      promises.push(uploadTask);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress = Math.round(\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n          );\n        },\n        (error) => {\n          console.log(error);\n        },\n        async () => {\n          await storage\n            .ref(\"images\")\n            .child(image.name)\n            .getDownloadURL()\n            .then((urls) => {\n              setImageUrls((prevState) => [...prevState, urls]);\n            });\n        }\n      );\n      \n    });\n\n    Promise.all(promises)\n      .then(() => alert(\"All images uploaded\"))\n      .catch((err) => console.log(err));\n\n      console.log(imageUrls)\n      console.log(videoUrls)\n  };\n  /* const handleUpload = (e) => {\n    e.preventDefault();\n    var uploadTask = null;\n    const promises = [];\n    files.map((image) => {\n      uploadTask = storage.ref(`files/${image.name}`).put(image);\n      promises.push(uploadTask);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress =\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log(\"Upload is \" + progress + \"% done\");\n        },\n        (error) => {\n          console.log(error);\n        },\n        () => {\n          uploadTask.snapshot.ref.getDownloadURL().then((url) => {\n            setHouseData((prev) => {\n              return { ...prev, [image]: url };\n            });\n            });\n        }\n      );\n    });\n      uploadTask = storage.ref(`files/${video.name}`).put(video);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log(\"Upload is \" + progress + \"% done\");\n        },\n        (error) => {\n          console.log(error);\n        },\n        () => {\n          uploadTask.snapshot.ref.getDownloadURL().then((url) => {\n            setHouseData((prev) => {\n              return {...prev, [video]:url};\n            });\n          });\n        }\n      );\n    console.log(housedata)\n    createHouse(housedata);\n  }; */\n\n    return (      \n    <div>\n      <h1 className=\"addProductTitle\">New Movie</h1>\n      <form className=\"addProductForm\">\n        {/* <div className=\"addProductItem\">\n          <label>House Name</label>\n          <input\n            type=\"text\"\n            placeholder=\"housename\"\n            name=\"housename\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"addProductItem\">\n          <label>Description</label>\n          <input\n            type=\"text\"\n            placeholder=\"description\"\n            name=\"description\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"addProductItem\">\n          <label>Fee per Month</label>\n          <input\n            type=\"number\"\n            placeholder=\"feepermonth\"\n            name=\"feepermonth\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"addProductItem\">\n          <label>Size</label>\n          <input\n            type=\"number\"\n            placeholder=\"size\"\n            name=\"size\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"addProductItem\">\n          <label>Number of Beds</label>\n          <input\n            type=\"number\"\n            placeholder=\"numberofbeds\"\n            name=\"numberofbeds\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"addProductItem\">\n          <label>propertytype</label>\n          <input\n            type=\"text\"\n            placeholder=\"propertytype\"\n            name=\"propertytype\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"addProductItem\">\n          <label>Available?</label>\n          <select name=\"available\" id=\"available\" onChange={handleChange}>\n            <option value=\"false\">No</option>\n            <option value=\"true\">Yes</option>\n          </select>\n        </div> */}\n        <div className=\"addProductItem\">\n          <label>Image</label>\n          <input\n            type=\"file\"\n            id=\"files\"\n            name=\"files\"\n            multiple\n            onChange={handleChangeForImg}\n          />\n        </div>\n        <div className=\"addProductItem\">\n          <label>Video</label>\n          <input\n            type=\"file\"\n            name=\"video\"\n            id=\"video\"\n            onChange={(e) => setVideo(e.target.files[0])}\n          />\n        </div>\n          <button className=\"addProductButton\" onClick={handleUpload}>\n            Upload\n          </button>\n      </form>\n    </div>\n    )\n}\n\nexport default RegisterHouses\n"]},"metadata":{},"sourceType":"module"}