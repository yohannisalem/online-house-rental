{"ast":null,"code":"var _jsxFileName = \"/home/yohannis/Desktop/Final-Project OHR/client/src/components/screen/Notification.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Notification = () => {\n  _s();\n\n  const publicVapidKey = 'BMffGk0gRxLPOSi-eOlXoR1ahY9Ce7uBY3010C06TeMoRYS_6n1A4ItVeOeNYutDlhPK27WW5UMrdyjBEj_-Pxo'; //register the service worker, register our push api, sedn the notifation\n\n  async function send() {\n    //register service worker\n    const register = await navigator.serviceWorker.register('/sw.js', {\n      scope: '/'\n    }); //register push\n\n    console.log('Registering push...');\n    const subscription = await register.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n    }); //Send push notification\n\n    await fetch(\"http://localhost:5000/api/subscribe\", {\n      method: \"POST\",\n      body: JSON.stringify(subscription),\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    });\n  }\n\n  function urlBase64ToUint8Array(base64String) {\n    const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n\n    return outputArray;\n  }\n\n  useEffect(() => {\n    send();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"notification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Notification, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Notification;\nexport default Notification; //check if the serveice worker can work in the current browser\n\nvar _c;\n\n$RefreshReg$(_c, \"Notification\");","map":{"version":3,"sources":["/home/yohannis/Desktop/Final-Project OHR/client/src/components/screen/Notification.js"],"names":["React","useEffect","Notification","publicVapidKey","send","register","navigator","serviceWorker","scope","console","log","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","fetch","method","body","JSON","stringify","headers","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB,QAAMC,cAAc,GAAG,yFAAvB,CADuB,CAGvB;;AACA,iBAAeC,IAAf,GAAqB;AACjB;AACA,UAAMC,QAAQ,GAAG,MAAMC,SAAS,CAACC,aAAV,CAAwBF,QAAxB,CAAiC,QAAjC,EAA2C;AAC9DG,MAAAA,KAAK,EAAE;AADuD,KAA3C,CAAvB,CAFiB,CAMjB;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,UAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACO,WAAT,CAAqBC,SAArB,CAA+B;AACtDC,MAAAA,eAAe,EAAE,IADqC;AAEtDC,MAAAA,oBAAoB,EAAEC,qBAAqB,CAACb,cAAD;AAFW,KAA/B,CAA3B,CARiB,CAajB;;AACA,UAAMc,KAAK,CAAC,qCAAD,EAAwC;AAC/CC,MAAAA,MAAM,EAAE,MADuC;AAE/CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,YAAf,CAFyC;AAG/CW,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHsC,KAAxC,CAAX;AAOH;;AAED,WAASN,qBAAT,CAA+BO,YAA/B,EAA6C;AACzC,UAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAW,CAAC,IAAIF,YAAY,CAACG,MAAb,GAAsB,CAA3B,IAAgC,CAA3C,CAAhB;AACA,UAAMC,MAAM,GAAG,CAACJ,YAAY,GAAGC,OAAhB,EACZI,OADY,CACJ,KADI,EACG,GADH,EAEZA,OAFY,CAEJ,IAFI,EAEE,GAFF,CAAf;AAIA,UAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAhB;AACA,UAAMK,WAAW,GAAG,IAAIC,UAAJ,CAAeJ,OAAO,CAACH,MAAvB,CAApB;;AAEA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACH,MAA5B,EAAoC,EAAEQ,CAAtC,EAAyC;AACvCF,MAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBL,OAAO,CAACM,UAAR,CAAmBD,CAAnB,CAAjB;AACD;;AACD,WAAOF,WAAP;AACH;;AACD/B,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,IAAI;AAEP,GAHQ,EAGN,EAHM,CAAT;AAIA,sBACI;AAAA,2BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAlDD;;GAAMF,Y;;KAAAA,Y;AAoDN,eAAeA,YAAf,C,CAGA","sourcesContent":["import React, { useEffect } from 'react'\n\nconst Notification = () => {\n    const publicVapidKey = 'BMffGk0gRxLPOSi-eOlXoR1ahY9Ce7uBY3010C06TeMoRYS_6n1A4ItVeOeNYutDlhPK27WW5UMrdyjBEj_-Pxo';\n\n    //register the service worker, register our push api, sedn the notifation\n    async function send(){\n        //register service worker\n        const register = await navigator.serviceWorker.register('/sw.js', {\n            scope: '/'\n        });\n    \n        //register push\n        console.log('Registering push...')\n        const subscription = await register.pushManager.subscribe({\n            userVisibleOnly: true,\n            applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n        });\n       \n        //Send push notification\n        await fetch(\"http://localhost:5000/api/subscribe\", {\n            method: \"POST\",\n            body: JSON.stringify(subscription),\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        });\n    }\n    \n    function urlBase64ToUint8Array(base64String) {\n        const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n        const base64 = (base64String + padding)\n          .replace(/\\-/g, \"+\")\n          .replace(/_/g, \"/\");\n      \n        const rawData = window.atob(base64);\n        const outputArray = new Uint8Array(rawData.length);\n      \n        for (let i = 0; i < rawData.length; ++i) {\n          outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n    }\n    useEffect(() => {\n        send()\n        \n    }, [])\n    return (\n        <div>\n            <h2>notification</h2>\n        </div>\n    )\n}\n\nexport default Notification\n\n\n//check if the serveice worker can work in the current browser\n"]},"metadata":{},"sourceType":"module"}