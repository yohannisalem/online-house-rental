{"ast":null,"code":"import { useEffect, useLayoutEffect as useLayoutEffect$1, useRef, useContext, createContext, useMemo, useCallback, useState, memo, forwardRef, useImperativeHandle } from 'react';\nimport clsx from 'clsx';\nimport { jsxs, jsx, Fragment } from 'react/jsx-runtime';\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z$e = \".c1wupbe700-beta6{background-color:inherit;border-bottom:1px solid var(--border-color);border-right:1px solid var(--border-color);contain:strict;contain:size layout style paint;outline:none;overflow:hidden;overflow:clip;padding:0 8px;text-overflow:ellipsis;white-space:nowrap}.c1wupbe700-beta6[aria-selected=true]{box-shadow:inset 0 0 0 2px var(--selection-color)}.cd0kgiy700-beta6{position:sticky;z-index:1}.c1730fa4700-beta6{box-shadow:2px 0 5px -2px hsla(0,0%,53%,.3)}\";\nstyleInject(css_248z$e, {\n  \"insertAt\": \"top\"\n});\nconst cell = \"c1wupbe700-beta6\";\nconst cellClassname = `rdg-cell ${cell}`;\nconst cellFrozen = \"cd0kgiy700-beta6\";\nconst cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\nconst cellFrozenLast = \"c1730fa4700-beta6\";\nconst cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\nvar css_248z$d = \".r104f42s700-beta6{--color:#000;--border-color:#ddd;--summary-border-color:#aaa;--background-color:#fff;--header-background-color:#f9f9f9;--row-hover-background-color:#f5f5f5;--row-selected-background-color:#dbecfa;--row-selected-hover-background-color:#c9e3f8;--checkbox-color:#005194;--checkbox-focus-color:#61b8ff;--checkbox-disabled-border-color:#ccc;--checkbox-disabled-background-color:#ddd;--selection-color:#66afe9;--font-size:14px;content-visibility:auto;background-color:var(--background-color);border:1px solid var(--border-color);box-sizing:border-box;color:var(--color);color-scheme:var(--color-scheme,light dark);contain:strict;contain:size layout style paint;direction:ltr;font-size:var(--font-size);height:350px;overflow:auto;user-select:none}@supports not (contain:strict){.r104f42s700-beta6{position:relative;z-index:0}}.r104f42s700-beta6 *,.r104f42s700-beta6 :after,.r104f42s700-beta6 :before{box-sizing:inherit}.r104f42s700-beta6.rdg-dark{--color-scheme:dark;--color:#ddd;--border-color:#444;--summary-border-color:#555;--background-color:#212121;--header-background-color:#1b1b1b;--row-hover-background-color:#171717;--row-selected-background-color:#1a73bc;--row-selected-hover-background-color:#1768ab;--checkbox-color:#94cfff;--checkbox-focus-color:#c7e6ff;--checkbox-disabled-border-color:#000;--checkbox-disabled-background-color:#333}.r104f42s700-beta6.rdg-light{--color-scheme:light}@media (prefers-color-scheme:dark){.r104f42s700-beta6:not(.rdg-light){--color:#ddd;--border-color:#444;--summary-border-color:#555;--background-color:#212121;--header-background-color:#1b1b1b;--row-hover-background-color:#171717;--row-selected-background-color:#1a73bc;--row-selected-hover-background-color:#1768ab;--checkbox-color:#94cfff;--checkbox-focus-color:#c7e6ff;--checkbox-disabled-border-color:#000;--checkbox-disabled-background-color:#333}}.v7ly7s700-beta6.r1otpg64700-beta6{cursor:move}\";\nstyleInject(css_248z$d, {\n  \"insertAt\": \"top\"\n});\nconst root = \"r104f42s700-beta6\";\nconst rootClassname = `rdg ${root}`;\nconst viewportDragging = \"v7ly7s700-beta6\";\nconst viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\nvar css_248z$c = \".r1otpg64700-beta6{background-color:var(--background-color);contain:strict;contain:size layout style paint;display:grid;grid-template-columns:var(--template-columns);grid-template-rows:var(--row-height);height:var(--row-height);left:0;line-height:var(--row-height);position:absolute;width:var(--row-width)}.r1otpg64700-beta6:hover{background-color:var(--row-hover-background-color)}.r1otpg64700-beta6[aria-selected=true]{background-color:var(--row-selected-background-color)}.r1otpg64700-beta6[aria-selected=true]:hover{background-color:var(--row-selected-hover-background-color)}\";\nstyleInject(css_248z$c, {\n  \"insertAt\": \"top\"\n});\nconst row = \"r1otpg64700-beta6\";\nconst rowClassname = `rdg-row ${row}`;\nconst useLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect$1;\n\nfunction useFocusRef(isSelected) {\n  const ref = useRef(null);\n  useLayoutEffect(() => {\n    var _ref$current;\n\n    if (!isSelected) return;\n    (_ref$current = ref.current) == null ? void 0 : _ref$current.focus({\n      preventScroll: true\n    });\n  }, [isSelected]);\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n\nvar css_248z$b = \".c1w6d5eo700-beta6{align-items:center;cursor:pointer;display:flex;inset:0;justify-content:center;margin-right:1px;position:absolute}.c1h7iz8d700-beta6{all:unset;margin:0;width:0}.cc79ydj700-beta6{background-color:var(--background-color);border:2px solid var(--border-color);content:\\\"\\\";height:20px;width:20px}.c1h7iz8d700-beta6:checked+.cc79ydj700-beta6{background-color:var(--checkbox-color);box-shadow:inset 0 0 0 4px var(--background-color)}.c1h7iz8d700-beta6:focus+.cc79ydj700-beta6{border-color:var(--checkbox-focus-color)}.c1e5jt0b700-beta6{cursor:default}.c1e5jt0b700-beta6 .cc79ydj700-beta6{background-color:var(--checkbox-disabled-background-color);border-color:var(--checkbox-disabled-border-color)}\";\nstyleInject(css_248z$b, {\n  \"insertAt\": \"top\"\n});\nconst checkboxLabel = \"c1w6d5eo700-beta6\";\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\nconst checkboxInput = \"c1h7iz8d700-beta6\";\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\nconst checkbox = \"cc79ydj700-beta6\";\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\nconst checkboxLabelDisabled = \"c1e5jt0b700-beta6\";\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nfunction SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}) {\n  const {\n    ref,\n    tabIndex\n  } = useFocusRef(isCellSelected);\n\n  function handleChange(e) {\n    onChange(e.target.checked, e.nativeEvent.shiftKey);\n  }\n\n  return /*#__PURE__*/jsxs(\"label\", {\n    className: clsx(checkboxLabelClassname, disabled && checkboxLabelDisabledClassname),\n    children: [/*#__PURE__*/jsx(\"input\", {\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      ref: ref,\n      type: \"checkbox\",\n      tabIndex: tabIndex,\n      className: checkboxInputClassname,\n      disabled: disabled,\n      checked: value,\n      onChange: handleChange,\n      onClick: onClick\n    }), /*#__PURE__*/jsx(\"div\", {\n      className: checkboxClassname\n    })]\n  });\n}\n\nfunction ValueFormatter(props) {\n  try {\n    return /*#__PURE__*/jsx(Fragment, {\n      children: props.row[props.column.key]\n    });\n  } catch {\n    return null;\n  }\n}\n\nvar css_248z$a = \".gch972y700-beta6{outline:none}.cz2qf0d700-beta6{stroke:currentColor;stroke-width:1.5px;fill:transparent;margin-left:4px;vertical-align:middle}.cz2qf0d700-beta6>path{transition:d .1s}\";\nstyleInject(css_248z$a, {\n  \"insertAt\": \"top\"\n});\nconst groupCellContent = \"gch972y700-beta6\";\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\nconst caret = \"cz2qf0d700-beta6\";\nconst caretClassname = `rdg-caret ${caret}`;\n\nfunction ToggleGroupFormatter({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}) {\n  const {\n    ref,\n    tabIndex\n  } = useFocusRef(isCellSelected);\n\n  function handleKeyDown({\n    key\n  }) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n  return /*#__PURE__*/jsxs(\"span\", {\n    ref: ref,\n    className: groupCellContentClassname,\n    tabIndex: tabIndex,\n    onKeyDown: handleKeyDown,\n    children: [groupKey, /*#__PURE__*/jsx(\"svg\", {\n      viewBox: \"0 0 14 8\",\n      width: \"14\",\n      height: \"8\",\n      className: caretClassname,\n      \"aria-hidden\": true,\n      children: /*#__PURE__*/jsx(\"path\", {\n        d: d\n      })\n    })]\n  });\n}\n\nconst RowSelectionContext = /*#__PURE__*/createContext(undefined);\nconst RowSelectionProvider = RowSelectionContext.Provider;\nconst RowSelectionChangeContext = /*#__PURE__*/createContext(undefined);\nconst RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nfunction useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n\nfunction getColSpan(column, lastFrozenColumnIndex, args) {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n\n  if (Number.isInteger(colSpan) && colSpan > 1 && (!column.frozen || column.idx + colSpan - 1 <= lastFrozenColumnIndex)) {\n    return colSpan;\n  }\n\n  return undefined;\n}\n\nfunction stopPropagation(event) {\n  event.stopPropagation();\n}\n\nconst nonInputKeys = new Set(['Unidentified', 'Alt', 'AltGraph', 'CapsLock', 'Control', 'Fn', 'FnLock', 'Meta', 'NumLock', 'ScrollLock', 'Shift', 'Tab', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'End', 'Home', 'PageDown', 'PageUp', 'Insert', 'ContextMenu', 'Escape', 'Pause', 'Play', 'PrintScreen', 'F1', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12']);\n\nfunction isCtrlKeyHeldDown(e) {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nfunction isDefaultCellInput(event) {\n  return !nonInputKeys.has(event.key);\n}\n\nfunction onEditorNavigation({\n  key,\n  target\n}) {\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.matches('.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child');\n  }\n\n  return false;\n}\n\nfunction isSelectedCellEditable({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}) {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nfunction isCellEditable(column, row) {\n  return column.editor != null && !column.rowGroup && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\n\nfunction getSelectedCellColSpan({\n  rows,\n  summaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}) {\n  if (rowIdx === -1) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'HEADER'\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, {\n        type: 'ROW',\n        row\n      });\n    }\n\n    return undefined;\n  }\n\n  if (summaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: summaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nfunction getNextSelectedCellPosition({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: {\n    idx: currentIdx\n  },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}) {\n  let {\n    idx: nextIdx,\n    rowIdx: nextRowIdx\n  } = nextPosition;\n\n  const setColSpan = moveRight => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n\n      setColSpan(false);\n    }\n  }\n\n  return {\n    idx: nextIdx,\n    rowIdx: nextRowIdx\n  };\n}\n\nfunction canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: {\n    rowIdx,\n    idx\n  },\n  shiftKey\n}) {\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n\nconst {\n  min,\n  max,\n  floor,\n  sign\n} = Math;\n\nfunction assertIsValidKeyGetter(keyGetter) {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nfunction getCellStyle(column, colSpan) {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    left: column.frozen ? `var(--frozen-left-${column.idx})` : undefined\n  };\n}\n\nfunction getCellClassname(column, ...extraClasses) {\n  return clsx(cellClassname, ...extraClasses, column.frozen && cellFrozenClassname, column.isLastFrozenColumn && cellFrozenLastClassname);\n}\n\nconst SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select\",\n    isCellSelected: props.isCellSelected,\n    value: isRowSelected,\n    onClick: stopPropagation,\n    onChange: (checked, isShiftClick) => {\n      onRowSelectionChange({\n        row: props.row,\n        checked,\n        isShiftClick\n      });\n    }\n  });\n}\n\nfunction SelectGroupFormatter(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select Group\",\n    isCellSelected: props.isCellSelected,\n    value: isRowSelected,\n    onChange: checked => {\n      onRowSelectionChange({\n        row: props.row,\n        checked,\n        isShiftClick: false\n      });\n    },\n    onClick: stopPropagation\n  });\n}\n\nconst SelectColumn = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n\n  headerRenderer(props) {\n    return /*#__PURE__*/jsx(SelectCellFormatter, {\n      \"aria-label\": \"Select All\",\n      isCellSelected: props.isCellSelected,\n      value: props.allRowsSelected,\n      onChange: props.onAllRowsSelectionChange,\n      onClick: stopPropagation\n    });\n  },\n\n  formatter: SelectFormatter,\n  groupFormatter: SelectGroupFormatter\n};\n\nfunction useCalculatedColumns({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}) {\n  var _defaultColumnOptions, _defaultColumnOptions2, _defaultColumnOptions3, _defaultColumnOptions4;\n\n  const minColumnWidth = (_defaultColumnOptions = defaultColumnOptions == null ? void 0 : defaultColumnOptions.minWidth) != null ? _defaultColumnOptions : 80;\n  const defaultFormatter = (_defaultColumnOptions2 = defaultColumnOptions == null ? void 0 : defaultColumnOptions.formatter) != null ? _defaultColumnOptions2 : ValueFormatter;\n  const defaultSortable = (_defaultColumnOptions3 = defaultColumnOptions == null ? void 0 : defaultColumnOptions.sortable) != null ? _defaultColumnOptions3 : false;\n  const defaultResizable = (_defaultColumnOptions4 = defaultColumnOptions == null ? void 0 : defaultColumnOptions.resizable) != null ? _defaultColumnOptions4 : false;\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    groupBy\n  } = useMemo(() => {\n    const groupBy = [];\n    let lastFrozenColumnIndex = -1;\n    const columns = rawColumns.map(rawColumn => {\n      var _rawGroupBy$includes, _rawColumn$sortable, _rawColumn$resizable, _rawColumn$formatter;\n\n      const rowGroup = (_rawGroupBy$includes = rawGroupBy == null ? void 0 : rawGroupBy.includes(rawColumn.key)) != null ? _rawGroupBy$includes : false;\n      const frozen = rowGroup || rawColumn.frozen || false;\n      const column = { ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        sortable: (_rawColumn$sortable = rawColumn.sortable) != null ? _rawColumn$sortable : defaultSortable,\n        resizable: (_rawColumn$resizable = rawColumn.resizable) != null ? _rawColumn$resizable : defaultResizable,\n        formatter: (_rawColumn$formatter = rawColumn.formatter) != null ? _rawColumn$formatter : defaultFormatter\n      };\n\n      if (rowGroup) {\n        var _column$groupFormatte;\n\n        (_column$groupFormatte = column.groupFormatter) != null ? _column$groupFormatte : column.groupFormatter = ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n    columns.sort(({\n      key: aKey,\n      frozen: frozenA\n    }, {\n      key: bKey,\n      frozen: frozenB\n    }) => {\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      if (rawGroupBy != null && rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n\n        return -1;\n      }\n\n      if (rawGroupBy != null && rawGroupBy.includes(bKey)) return 1;\n\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n\n      if (frozenB) return 1;\n      return 0;\n    });\n    const colSpanColumns = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n  const {\n    layoutCssVars,\n    totalColumnWidth,\n    totalFrozenColumnWidth,\n    columnMetrics\n  } = useMemo(() => {\n    const columnMetrics = new Map();\n    let left = 0;\n    let totalColumnWidth = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, minColumnWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, {\n          width,\n          left: 0\n        });\n      }\n    }\n\n    const unallocatedWidth = viewportWidth - allocatedWidth;\n    const unallocatedColumnWidth = unallocatedWidth / unassignedColumnsCount;\n\n    for (const column of columns) {\n      let width;\n\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column);\n        columnMetric.left = left;\n        ({\n          width\n        } = columnMetric);\n      } else {\n        width = clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n        columnMetrics.set(column, {\n          width,\n          left\n        });\n      }\n\n      totalColumnWidth += width;\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex]);\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars = {\n      '--template-columns': templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--frozen-left-${column.idx}`] = `${columnMetrics.get(column).left}px`;\n    }\n\n    return {\n      layoutCssVars,\n      totalColumnWidth,\n      totalFrozenColumnWidth,\n      columnMetrics\n    };\n  }, [columnWidths, columns, viewportWidth, minColumnWidth, lastFrozenColumnIndex]);\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo(() => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n\n    while (colVisibleStartIdx < lastColIdx) {\n      const {\n        left,\n        width\n      } = columnMetrics.get(columns[colVisibleStartIdx]);\n\n      if (left + width > viewportLeft) {\n        break;\n      }\n\n      colVisibleStartIdx++;\n    }\n\n    let colVisibleEndIdx = colVisibleStartIdx;\n\n    while (colVisibleEndIdx < lastColIdx) {\n      const {\n        left,\n        width\n      } = columnMetrics.get(columns[colVisibleEndIdx]);\n\n      if (left + width >= viewportRight) {\n        break;\n      }\n\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columnMetrics, columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth, enableVirtualization]);\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth({\n  key,\n  width\n}, columnWidths, viewportWidth) {\n  if (columnWidths.has(key)) {\n    return columnWidths.get(key);\n  }\n\n  if (typeof width === 'number') {\n    return width;\n  }\n\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return floor(viewportWidth * parseInt(width, 10) / 100);\n  }\n\n  return undefined;\n}\n\nfunction clampColumnWidth(width, {\n  minWidth,\n  maxWidth\n}, minColumnWidth) {\n  width = max(width, minWidth != null ? minWidth : minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nfunction useCombinedRefs(...refs) {\n  return useCallback(handle => {\n    for (const ref of refs) {\n      if (typeof ref === 'function') {\n        ref(handle);\n      } else if (ref !== null && 'current' in ref) {\n        ref.current = handle;\n      }\n    }\n  }, refs);\n}\n\nfunction useGridDimensions() {\n  const gridRef = useRef(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n  useLayoutEffect(() => {\n    const {\n      ResizeObserver\n    } = window;\n    if (ResizeObserver == null) return;\n    const resizeObserver = new ResizeObserver(() => {\n      const {\n        clientWidth,\n        clientHeight\n      } = gridRef.current;\n      setGridWidth(clientWidth - (devicePixelRatio % 1 === 0 ? 0 : 1));\n      setGridHeight(clientHeight);\n    });\n    resizeObserver.observe(gridRef.current);\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n  return [gridRef, gridWidth, gridHeight];\n}\n\nfunction useLatestFunc(fn) {\n  const ref = useRef(fn);\n  useEffect(() => {\n    ref.current = fn;\n  });\n  return useCallback((...args) => {\n    ref.current(...args);\n  }, []);\n}\n\nfunction useRovingCellRef(isSelected) {\n  const ref = useRef(null);\n  const isChildFocused = useRef(false);\n  const [, forceRender] = useState({});\n  useLayoutEffect(() => {\n    var _ref$current;\n\n    if (!isSelected) {\n      isChildFocused.current = false;\n      return;\n    }\n\n    if (isChildFocused.current) {\n      forceRender({});\n      return;\n    }\n\n    (_ref$current = ref.current) == null ? void 0 : _ref$current.focus();\n  }, [isSelected]);\n\n  function onFocus(event) {\n    if (event.target !== ref.current) {\n      isChildFocused.current = true;\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused.current;\n  return {\n    ref,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus\n  };\n}\n\nvar css_248z$9 = \".ram993v700-beta6{outline:none}.ram993v700-beta6:after{box-shadow:inset 0 0 0 2px var(--selection-color);content:\\\"\\\";inset:0;pointer-events:none;position:absolute;z-index:2}.ram993v700-beta6>.c1wupbe700-beta6:first-child{box-shadow:inset 2px 0 0 0 var(--selection-color)}\";\nstyleInject(css_248z$9, {\n  \"insertAt\": \"top\"\n});\nconst rowSelected = \"ram993v700-beta6\";\nconst rowSelectedClassname = `rdg-row-selected ${rowSelected}`;\n\nfunction useRovingRowRef(selectedCellIdx) {\n  const isSelected = selectedCellIdx === -1;\n  const {\n    ref,\n    tabIndex\n  } = useFocusRef(isSelected);\n  return {\n    ref,\n    tabIndex,\n    className: isSelected ? rowSelectedClassname : undefined\n  };\n}\n\nfunction useViewportColumns({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}) {\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx, colSpan) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n        type: 'HEADER'\n      }))) {\n        break;\n      }\n\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n\n        if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n          type: 'ROW',\n          row\n        }))) {\n          break;\n        }\n      }\n\n      if (summaryRows != null) {\n        for (const row of summaryRows) {\n          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n            type: 'SUMMARY',\n            row\n          }))) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [rowOverscanStartIdx, rowOverscanEndIdx, rows, summaryRows, colOverscanStartIdx, lastFrozenColumnIndex, colSpanColumns, isGroupRow]);\n  return useMemo(() => {\n    const viewportColumns = [];\n\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n\nfunction isReadonlyArray(arr) {\n  return Array.isArray(arr);\n}\n\nfunction useViewportRows({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (rows, [groupByKey, ...remainingGroupByKeys], startRowIndex) => {\n      let groupRowsCount = 0;\n      const groups = {};\n\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0 ? [childRows, childRows.length] : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1);\n        groups[key] = {\n          childRows,\n          childGroups,\n          startRowIndex: startRowIndex + groupRowsCount\n        };\n        groupRowsCount += childRowsCount + 1;\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n  const [rows, isGroupRow] = useMemo(() => {\n    const allGroupRows = new Set();\n    if (!groupedRows) return [rawRows, isGroupRow];\n    const flattenedRows = [];\n\n    const expandGroup = (rows, parentId, level) => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        var _expandedGroupIds$has;\n\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = (_expandedGroupIds$has = expandedGroupIds == null ? void 0 : expandedGroupIds.has(id)) != null ? _expandedGroupIds$has : false;\n        const {\n          childRows,\n          childGroups,\n          startRowIndex\n        } = rows[groupKey];\n        const groupRow = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row) {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n  const {\n    totalRowHeight,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        getRowTop: rowIdx => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: offset => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    const rowPositions = rows.map(row => {\n      const currentRowHeight = isGroupRow(row) ? rowHeight({\n        type: 'GROUP',\n        row\n      }) : rowHeight({\n        type: 'ROW',\n        row\n      });\n      const position = {\n        top: totalRowHeight,\n        height: currentRowHeight\n      };\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = rowIdx => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      getRowTop: rowIdx => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: rowIdx => rowPositions[validateRowIdx(rowIdx)].height,\n\n      findRowIdx(offset) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n\n        return 0;\n      }\n\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  if (!enableVirtualization) {\n    return {\n      rowOverscanStartIdx: 0,\n      rowOverscanEndIdx: rows.length - 1,\n      rows,\n      rowsCount,\n      totalRowHeight,\n      isGroupRow,\n      getRowTop,\n      getRowHeight,\n      findRowIdx\n    };\n  }\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = findRowIdx(scrollTop);\n  const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n  const rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n  const rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n\nvar css_248z$8 = \".h13yq3r8700-beta6{cursor:pointer;display:flex}.h13yq3r8700-beta6:focus{outline:none}.ht6rdyl700-beta6{flex-grow:1;overflow:hidden;overflow:clip;text-overflow:ellipsis}.a1emyi9700-beta6{fill:currentColor}.a1emyi9700-beta6>path{transition:d .1s}\";\nstyleInject(css_248z$8, {\n  \"insertAt\": \"top\"\n});\nconst headerSortCell = \"h13yq3r8700-beta6\";\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\nconst headerSortName = \"ht6rdyl700-beta6\";\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\nconst arrow = \"a1emyi9700-beta6\";\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nfunction SortableHeaderCell({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}) {\n  const {\n    ref,\n    tabIndex\n  } = useFocusRef(isCellSelected);\n\n  function handleKeyDown(event) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return /*#__PURE__*/jsxs(\"span\", {\n    ref: ref,\n    tabIndex: tabIndex,\n    className: headerSortCellClassname,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n    children: [/*#__PURE__*/jsx(\"span\", {\n      className: headerSortNameClassname,\n      children: children\n    }), /*#__PURE__*/jsxs(\"span\", {\n      children: [sortDirection !== undefined && /*#__PURE__*/jsx(\"svg\", {\n        viewBox: \"0 0 12 8\",\n        width: \"12\",\n        height: \"8\",\n        className: arrowClassname,\n        \"aria-hidden\": true,\n        children: /*#__PURE__*/jsx(\"path\", {\n          d: sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'\n        })\n      }), priority]\n    })]\n  });\n}\n\nvar css_248z$7 = \".celq7o9700-beta6{touch-action:none}.celq7o9700-beta6:after{bottom:0;content:\\\"\\\";cursor:col-resize;position:absolute;right:0;top:0;width:10px}\";\nstyleInject(css_248z$7, {\n  \"insertAt\": \"top\"\n});\nconst cellResizable = \"celq7o9700-beta6\";\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nfunction HeaderCell({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid\n}) {\n  const {\n    ref,\n    tabIndex,\n    onFocus\n  } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns == null ? void 0 : sortColumns.findIndex(sort => sort.columnKey === column.key);\n  const sortColumn = sortIndex !== undefined && sortIndex > -1 ? sortColumns[sortIndex] : undefined;\n  const sortDirection = sortColumn == null ? void 0 : sortColumn.direction;\n  const priority = sortColumn !== undefined && sortColumns.length > 1 ? sortIndex + 1 : undefined;\n  const ariaSort = sortDirection && !priority ? sortDirection === 'ASC' ? 'ascending' : 'descending' : undefined;\n  const className = getCellClassname(column, column.headerCellClass, column.resizable && cellResizableClassname);\n\n  function onPointerDown(event) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const {\n      currentTarget,\n      pointerId\n    } = event;\n    const {\n      right\n    } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) {\n      return;\n    }\n\n    function onPointerMove(event) {\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n\n      if (width > 0) {\n        onColumnResize(column, width);\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick) {\n    if (onSortColumnsChange == null) return;\n    const {\n      sortDescendingFirst\n    } = column;\n\n    if (sortColumn === undefined) {\n      const nextSort = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn;\n\n      if (sortDescendingFirst && sortDirection === 'DESC' || !sortDescendingFirst && sortDirection === 'ASC') {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns];\n\n        if (nextSortColumn) {\n          nextSortColumns[sortIndex] = nextSortColumn;\n        } else {\n          nextSortColumns.splice(sortIndex, 1);\n        }\n\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function handleFocus(event) {\n    onFocus(event);\n\n    if (shouldFocusGrid) {\n      selectCell(0);\n    }\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return /*#__PURE__*/jsx(column.headerRenderer, {\n        column: column,\n        sortDirection: sortDirection,\n        priority: priority,\n        onSort: onSort,\n        allRowsSelected: allRowsSelected,\n        onAllRowsSelectionChange: onAllRowsSelectionChange,\n        isCellSelected: isCellSelected\n      });\n    }\n\n    if (column.sortable) {\n      return /*#__PURE__*/jsx(SortableHeaderCell, {\n        onSort: onSort,\n        sortDirection: sortDirection,\n        priority: priority,\n        isCellSelected: isCellSelected,\n        children: column.name\n      });\n    }\n\n    return column.name;\n  }\n\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"columnheader\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    \"aria-sort\": ariaSort,\n    \"aria-colspan\": colSpan,\n    ref: ref,\n    tabIndex: shouldFocusGrid ? 0 : tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onFocus: handleFocus,\n    onClick: onClick,\n    onPointerDown: column.resizable ? onPointerDown : undefined,\n    children: getCell()\n  });\n}\n\nvar css_248z$6 = \".h197vzie700-beta6{background-color:var(--header-background-color);contain:strict;contain:size layout style paint;display:grid;font-weight:700;grid-template-columns:var(--template-columns);grid-template-rows:var(--header-row-height);height:var(--header-row-height);line-height:var(--header-row-height);outline:none;position:sticky;top:0;width:var(--row-width);z-index:3}.h197vzie700-beta6[aria-selected=true]{box-shadow:inset 0 0 0 2px var(--selection-color)}\";\nstyleInject(css_248z$6, {\n  \"insertAt\": \"top\"\n});\nconst headerRow = \"h197vzie700-beta6\";\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid\n}) {\n  const {\n    ref,\n    tabIndex,\n    className\n  } = useRovingRowRef(selectedCellIdx);\n  const cells = [];\n\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'HEADER'\n    });\n\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push( /*#__PURE__*/jsx(HeaderCell, {\n      column: column,\n      colSpan: colSpan,\n      isCellSelected: selectedCellIdx === column.idx,\n      onColumnResize: onColumnResize,\n      allRowsSelected: allRowsSelected,\n      onAllRowsSelectionChange: onAllRowsSelectionChange,\n      onSortColumnsChange: onSortColumnsChange,\n      sortColumns: sortColumns,\n      selectCell: selectCell,\n      shouldFocusGrid: shouldFocusGrid && index === 0\n    }, column.key));\n  }\n\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": 1,\n    ref: ref,\n    tabIndex: tabIndex,\n    className: clsx(headerRowClassname, className),\n    children: cells\n  });\n}\n\nconst HeaderRow$1 = /*#__PURE__*/memo(HeaderRow);\nvar css_248z$5 = \".c1bmg16t700-beta6,.ccpfvsn700-beta6{background-color:#ccf}.c1bmg16t700-beta6.ccpfvsn700-beta6{background-color:#99f}\";\nstyleInject(css_248z$5, {\n  \"insertAt\": \"top\"\n});\nconst cellCopied = \"ccpfvsn700-beta6\";\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\nconst cellDraggedOver = \"c1bmg16t700-beta6\";\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}) {\n  const {\n    ref,\n    tabIndex,\n    onFocus\n  } = useRovingCellRef(isCellSelected);\n  const {\n    cellClass\n  } = column;\n  const className = getCellClassname(column, typeof cellClass === 'function' ? cellClass(row) : cellClass, isCopied && cellCopiedClassname, isDraggedOver && cellDraggedOverClassname);\n\n  function selectCellWrapper(openEditor) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    var _column$editorOptions;\n\n    selectCellWrapper((_column$editorOptions = column.editorOptions) == null ? void 0 : _column$editorOptions.editOnClick);\n    onRowClick == null ? void 0 : onRowClick(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick == null ? void 0 : onRowDoubleClick(row, column);\n  }\n\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    \"aria-colspan\": colSpan,\n    \"aria-readonly\": !isCellEditable(column, row) || undefined,\n    ref: ref,\n    tabIndex: tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onClick: handleClick,\n    onDoubleClick: handleDoubleClick,\n    onContextMenu: handleContextMenu,\n    onFocus: onFocus,\n    ...props,\n    children: !column.rowGroup && /*#__PURE__*/jsxs(Fragment, {\n      children: [/*#__PURE__*/jsx(column.formatter, {\n        column: column,\n        row: row,\n        isCellSelected: isCellSelected,\n        onRowChange: onRowChange\n      }), dragHandle]\n    })\n  });\n}\n\nconst Cell$1 = /*#__PURE__*/memo(Cell);\n\nfunction Row({\n  className,\n  rowIdx,\n  selectedCellIdx,\n  isRowSelected,\n  copiedCellIdx,\n  draggedOverCellIdx,\n  lastFrozenColumnIndex,\n  row,\n  viewportColumns,\n  selectedCellEditor,\n  selectedCellDragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  top,\n  height,\n  onRowChange,\n  selectCell,\n  ...props\n}, ref) {\n  const {\n    ref: rowRef,\n    tabIndex,\n    className: rovingClassName\n  } = useRovingRowRef(selectedCellIdx);\n  const handleRowChange = useLatestFunc(newRow => {\n    onRowChange(rowIdx, newRow);\n  });\n\n  function handleDragEnter(event) {\n    setDraggedOverRowIdx == null ? void 0 : setDraggedOverRowIdx(rowIdx);\n    onMouseEnter == null ? void 0 : onMouseEnter(event);\n  }\n\n  className = clsx(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, rovingClassName, rowClass == null ? void 0 : rowClass(row), className);\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const {\n      idx\n    } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push( /*#__PURE__*/jsx(Cell$1, {\n        column: column,\n        colSpan: colSpan,\n        row: row,\n        isCopied: copiedCellIdx === idx,\n        isDraggedOver: draggedOverCellIdx === idx,\n        isCellSelected: isCellSelected,\n        dragHandle: isCellSelected ? selectedCellDragHandle : undefined,\n        onRowClick: onRowClick,\n        onRowDoubleClick: onRowDoubleClick,\n        onRowChange: handleRowChange,\n        selectCell: selectCell\n      }, column.key));\n    }\n  }\n\n  return /*#__PURE__*/jsx(RowSelectionProvider, {\n    value: isRowSelected,\n    children: /*#__PURE__*/jsx(\"div\", {\n      role: \"row\",\n      ref: useCombinedRefs(ref, rowRef),\n      tabIndex: tabIndex,\n      className: className,\n      onMouseEnter: handleDragEnter,\n      style: {\n        top,\n        '--row-height': `${height}px`\n      },\n      ...props,\n      children: cells\n    })\n  });\n}\n\nconst Row$1 = /*#__PURE__*/memo(Row);\nconst RowWithRef = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Row));\n\nfunction GroupCell({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}) {\n  const {\n    ref,\n    tabIndex,\n    onFocus\n  } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    ref: ref,\n    tabIndex: tabIndex,\n    className: getCellClassname(column),\n    style: { ...getCellStyle(column),\n      cursor: isLevelMatching ? 'pointer' : 'default'\n    },\n    onClick: isLevelMatching ? toggleGroup : undefined,\n    onFocus: onFocus,\n    children: (!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && /*#__PURE__*/jsx(column.groupFormatter, {\n      groupKey: groupKey,\n      childRows: childRows,\n      column: column,\n      row: row,\n      isExpanded: isExpanded,\n      isCellSelected: isCellSelected,\n      toggleGroup: toggleGroup\n    })\n  }, column.key);\n}\n\nconst GroupCell$1 = /*#__PURE__*/memo(GroupCell);\nvar css_248z$4 = \".gyxx7e9700-beta6:not([aria-selected=true]){background-color:var(--header-background-color)}.gyxx7e9700-beta6>.c1wupbe700-beta6:not(:last-child):not(.c1730fa4700-beta6){border-right:none}\";\nstyleInject(css_248z$4, {\n  \"insertAt\": \"top\"\n});\nconst groupRow = \"gyxx7e9700-beta6\";\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  top,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}) {\n  const {\n    ref,\n    tabIndex,\n    className\n  } = useRovingRowRef(selectedCellIdx);\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return /*#__PURE__*/jsx(RowSelectionProvider, {\n    value: isRowSelected,\n    children: /*#__PURE__*/jsx(\"div\", {\n      role: \"row\",\n      \"aria-level\": level,\n      \"aria-expanded\": isExpanded,\n      ref: ref,\n      tabIndex: tabIndex,\n      className: clsx(rowClassname, groupRowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, className),\n      onClick: handleSelectGroup,\n      style: {\n        top,\n        '--row-height': `${height}px`\n      },\n      ...props,\n      children: viewportColumns.map(column => /*#__PURE__*/jsx(GroupCell$1, {\n        id: id,\n        groupKey: groupKey,\n        childRows: childRows,\n        isExpanded: isExpanded,\n        isCellSelected: selectedCellIdx === column.idx,\n        column: column,\n        row: row,\n        groupColumnIndex: idx,\n        toggleGroup: toggleGroup\n      }, column.key))\n    })\n  });\n}\n\nconst GroupRowRenderer = /*#__PURE__*/memo(GroupedRow);\n\nfunction SummaryCell({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}) {\n  const {\n    ref,\n    tabIndex,\n    onFocus\n  } = useRovingCellRef(isCellSelected);\n  const {\n    summaryFormatter: SummaryFormatter,\n    summaryCellClass\n  } = column;\n  const className = getCellClassname(column, typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass);\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": isCellSelected,\n    ref: ref,\n    tabIndex: tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onClick: onClick,\n    onFocus: onFocus,\n    children: SummaryFormatter && /*#__PURE__*/jsx(SummaryFormatter, {\n      column: column,\n      row: row,\n      isCellSelected: isCellSelected\n    })\n  });\n}\n\nconst SummaryCell$1 = /*#__PURE__*/memo(SummaryCell);\nvar css_248z$3 = \".snfqesz700-beta6.r1otpg64700-beta6{grid-template-rows:var(--summary-row-height);height:var(--summary-row-height);line-height:var(--summary-row-height);position:sticky;z-index:3}.s1jijrjz700-beta6>.c1wupbe700-beta6{border-top:2px solid var(--summary-border-color)}\";\nstyleInject(css_248z$3, {\n  \"insertAt\": \"top\"\n});\nconst summaryRow = \"snfqesz700-beta6\";\nconst summaryRowBorderClassname = \"s1jijrjz700-beta6\";\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}) {\n  const {\n    ref,\n    tabIndex,\n    className\n  } = useRovingRowRef(selectedCellIdx);\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row\n    });\n\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n    cells.push( /*#__PURE__*/jsx(SummaryCell$1, {\n      column: column,\n      colSpan: colSpan,\n      row: row,\n      isCellSelected: isCellSelected,\n      selectCell: selectCell\n    }, column.key));\n  }\n\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": ariaRowIndex,\n    ref: ref,\n    tabIndex: tabIndex,\n    className: clsx(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, summaryRowClassname, className, rowIdx === 0 && summaryRowBorderClassname),\n    style: {\n      bottom\n    },\n    children: cells\n  });\n}\n\nconst SummaryRow$1 = /*#__PURE__*/memo(SummaryRow);\nvar css_248z$2 = \".c1tngyp1700-beta6.rdg-cell{padding:0}\";\nstyleInject(css_248z$2, {\n  \"insertAt\": \"top\"\n});\nconst cellEditing = \"c1tngyp1700-beta6\";\n\nfunction EditCell({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  onClose\n}) {\n  var _column$editorOptions, _column$editorOptions2;\n\n  const frameRequestRef = useRef();\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onRowChange(row, true);\n  });\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current);\n  }\n\n  useEffect(() => {\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, {\n      capture: true\n    });\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, {\n        capture: true\n      });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideMouseDown]);\n  const {\n    cellClass\n  } = column;\n  const className = getCellClassname(column, 'rdg-editor-container', typeof cellClass === 'function' ? cellClass(row) : cellClass, !((_column$editorOptions = column.editorOptions) != null && _column$editorOptions.renderFormatter) && cellEditing);\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": true,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onMouseDownCapture: cancelFrameRequest,\n    children: column.editor != null && /*#__PURE__*/jsxs(Fragment, {\n      children: [/*#__PURE__*/jsx(column.editor, {\n        column: column,\n        row: row,\n        onRowChange: onRowChange,\n        onClose: onClose\n      }), ((_column$editorOptions2 = column.editorOptions) == null ? void 0 : _column$editorOptions2.renderFormatter) && /*#__PURE__*/jsx(column.formatter, {\n        column: column,\n        row: row,\n        isCellSelected: true,\n        onRowChange: onRowChange\n      })]\n    })\n  });\n}\n\nvar css_248z$1 = \".cadd3bp700-beta6{background-color:var(--selection-color);bottom:0;cursor:move;height:8px;position:absolute;right:0;width:8px}.cadd3bp700-beta6:hover{background-color:var(--background-color);border:2px solid var(--selection-color);height:16px;width:16px}\";\nstyleInject(css_248z$1, {\n  \"insertAt\": \"top\"\n});\nconst cellDragHandle = \"cadd3bp700-beta6\";\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\nfunction DragHandle({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}) {\n  function handleMouseDown(event) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event) {\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n    const {\n      rowIdx\n    } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx, endRowIdx) {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes = [];\n\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({\n        rowIdx: i,\n        idx\n      })) {\n        const updatedRow = onFill({\n          columnKey: column.key,\n          sourceRow,\n          targetRow: rows[i]\n        });\n\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange == null ? void 0 : onRowsChange(updatedRows, {\n        indexes,\n        column\n      });\n    }\n  }\n\n  return /*#__PURE__*/jsx(\"div\", {\n    className: cellDragHandleClassname,\n    onMouseDown: handleMouseDown,\n    onDoubleClick: handleDoubleClick\n  });\n}\n\nconst initialPosition = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nfunction DataGrid({\n  columns: rawColumns,\n  rows: rawRows,\n  summaryRows,\n  rowKeyGetter,\n  onRowsChange,\n  rowHeight,\n  headerRowHeight: rawHeaderRowHeight,\n  summaryRowHeight: rawSummaryRowHeight,\n  selectedRows,\n  onSelectedRowsChange,\n  sortColumns,\n  onSortColumnsChange,\n  defaultColumnOptions,\n  groupBy: rawGroupBy,\n  rowGrouper,\n  expandedGroupIds,\n  onExpandedGroupIdsChange,\n  onRowClick,\n  onRowDoubleClick,\n  onScroll,\n  onColumnResize,\n  onFill,\n  onPaste,\n  cellNavigationMode: rawCellNavigationMode,\n  enableVirtualization,\n  rowRenderer,\n  noRowsFallback,\n  className,\n  style,\n  rowClass,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy,\n  'data-testid': testId\n}, ref) {\n  var _rowHeight, _enableVirtualization, _summaryRows$length;\n\n  (_rowHeight = rowHeight) != null ? _rowHeight : rowHeight = 35;\n  const headerRowHeight = rawHeaderRowHeight != null ? rawHeaderRowHeight : typeof rowHeight === 'number' ? rowHeight : 35;\n  const summaryRowHeight = rawSummaryRowHeight != null ? rawSummaryRowHeight : typeof rowHeight === 'number' ? rowHeight : 35;\n  const RowRenderer = rowRenderer != null ? rowRenderer : Row$1;\n  const cellNavigationMode = rawCellNavigationMode != null ? rawCellNavigationMode : 'NONE';\n  (_enableVirtualization = enableVirtualization) != null ? _enableVirtualization : enableVirtualization = true;\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState(initialPosition);\n  const [copiedCell, setCopiedCell] = useState(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState(undefined);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = (_summaryRows$length = summaryRows == null ? void 0 : summaryRows.length) != null ? _summaryRows$length : 0;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isHeaderRowSelected = selectedPosition.rowIdx === -1;\n  const allRowsSelected = useMemo(() => {\n    const {\n      length\n    } = rawRows;\n    return length !== 0 && selectedRows != null && rowKeyGetter != null && selectedRows.size >= length && rawRows.every(row => selectedRows.has(rowKeyGetter(row)));\n  }, [rawRows, selectedRows, rowKeyGetter]);\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    isGroupRow\n  });\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1;\n  const maxRowIdx = headerRowsCount + rows.length + summaryRowsCount - 2;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc((row, column, enableEditor) => {\n    const rowIdx = rows.indexOf(row);\n    selectCell({\n      rowIdx,\n      idx: column.idx\n    }, enableEditor);\n  });\n  const selectGroupLatest = useLatestFunc(rowIdx => {\n    selectCell({\n      rowIdx,\n      idx: -1\n    });\n  });\n  const selectHeaderCellLatest = useLatestFunc(idx => {\n    selectCell({\n      rowIdx: -1,\n      idx\n    });\n  });\n  const selectSummaryCellLatest = useLatestFunc((summaryRow, column) => {\n    const rowIdx = summaryRows.indexOf(summaryRow) + headerRowsCount + rows.length - 1;\n    selectCell({\n      rowIdx,\n      idx: column.idx\n    });\n  });\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n  useLayoutEffect(() => {\n    if (!selectedCellIsWithinSelectionBounds || selectedPosition === prevSelectedPosition.current || selectedPosition.mode === 'EDIT') {\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n  });\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n\n    scrollToColumn(idx) {\n      scrollToCell({\n        idx\n      });\n    },\n\n    scrollToRow(rowIdx) {\n      const {\n        current\n      } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n\n    selectCell\n  }));\n  const handleColumnResize = useCallback((column, width) => {\n    setColumnWidths(columnWidths => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(column.key, width);\n      return newColumnWidths;\n    });\n    onColumnResize == null ? void 0 : onColumnResize(column.idx, width);\n  }, [onColumnResize]);\n  const setDraggedOverRowIdx = useCallback(rowIdx => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  function selectRow({\n    row,\n    checked,\n    isShiftClick\n  }) {\n    if (!onSelectedRowsChange) return;\n    assertIsValidKeyGetter(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked) {\n    if (!onSelectedRowsChange) return;\n    assertIsValidKeyGetter(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target.matches('.rdg-row, .rdg-header-row');\n    if (!isCellEvent && !isRowEvent) return;\n    const {\n      key,\n      keyCode\n    } = event;\n    const {\n      rowIdx\n    } = selectedPosition;\n\n    if (selectedCellIsWithinViewportBounds && onPaste != null && isCtrlKeyHeldDown(event) && !isGroupRow(rows[rowIdx]) && selectedPosition.mode === 'SELECT') {\n      const cKey = 67;\n      const vKey = 86;\n\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (isGroupRow(row) && selectedPosition.idx === -1 && (key === 'ArrowLeft' && row.isExpanded || key === 'ArrowRight' && !row.isExpanded)) {\n        event.preventDefault();\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        closeEditor();\n        return;\n\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event) {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll == null ? void 0 : onScroll(event);\n  }\n\n  function getRawRowIdx(rowIdx) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx]) : rowIdx;\n  }\n\n  function updateRow(rowIdx, row) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    var _columns$selectedPosi;\n\n    if (((_columns$selectedPosi = columns[selectedPosition.idx]) == null ? void 0 : _columns$selectedPosi.editor) == null || selectedPosition.mode === 'SELECT' || selectedPosition.row === selectedPosition.originalRow) {\n      return;\n    }\n\n    updateRow(selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    setCopiedCell({\n      row: rawRows[getRawRowIdx(rowIdx)],\n      columnKey: columns[idx].key\n    });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event) {\n    var _column$editorOptions;\n\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const {\n      key,\n      shiftKey\n    } = event;\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        commitEditorChanges();\n        closeEditor();\n      }\n\n      return;\n    }\n\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({\n        row,\n        checked: !selectedRows.has(rowKey),\n        isShiftClick: false\n      });\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    (_column$editorOptions = column.editorOptions) == null ? void 0 : _column$editorOptions.onCellKeyDown == null ? void 0 : _column$editorOptions.onCellKeyDown(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({\n        idx,\n        rowIdx\n      }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleEditorRowChange(row, commitChanges) {\n    if (selectedPosition.mode === 'SELECT') return;\n\n    if (commitChanges) {\n      updateRow(selectedPosition.rowIdx, row);\n      closeEditor();\n    } else {\n      setSelectedPosition(position => ({ ...position,\n        row\n      }));\n    }\n  }\n\n  function handleOnClose(commitChanges) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n\n    closeEditor();\n  }\n\n  function isColIdxWithinSelectionBounds(idx) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({\n    idx,\n    rowIdx\n  }) {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({\n    idx,\n    rowIdx\n  }) {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position) {\n    return isCellWithinViewportBounds(position) && isSelectedCellEditable({\n      columns,\n      rows,\n      selectedPosition: position,\n      isGroupRow\n    });\n  }\n\n  function selectCell(position, enableEditor) {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx];\n      setSelectedPosition({ ...position,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      });\n    } else if (selectedPosition.mode !== 'SELECT' || selectedPosition.idx !== position.idx || selectedPosition.rowIdx !== position.rowIdx) {\n      setSelectedPosition({ ...position,\n        mode: 'SELECT'\n      });\n    }\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({\n      idx,\n      rowIdx\n    }) => ({\n      idx,\n      rowIdx,\n      mode: 'SELECT'\n    }));\n  }\n\n  function scrollToCell({\n    idx,\n    rowIdx\n  }) {\n    const {\n      current\n    } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      var _rowIdx;\n\n      (_rowIdx = rowIdx) != null ? _rowIdx : rowIdx = selectedPosition.rowIdx;\n      if (!isCellWithinSelectionBounds({\n        rowIdx,\n        idx\n      })) return;\n      const {\n        clientWidth\n      } = current;\n      const column = columns[idx];\n      const {\n        left,\n        width\n      } = columnMetrics.get(column);\n      let right = left + width;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const {\n          left,\n          width\n        } = columnMetrics.get(columns[column.idx + colSpan - 1]);\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = left - totalFrozenColumnWidth;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = right - clientWidth;\n      }\n    }\n\n    if (typeof rowIdx === 'number' && isRowIdxWithinViewportBounds(rowIdx)) {\n      const rowTop = getRowTop(rowIdx);\n      const rowHeight = getRowHeight(rowIdx);\n\n      if (rowTop < scrollTop) {\n        current.scrollTop = rowTop;\n      } else if (rowTop + rowHeight > scrollTop + clientHeight) {\n        current.scrollTop = rowTop + rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key, ctrlKey, shiftKey) {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    if (key === 'ArrowLeft' && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n\n      if (parentRowIdx !== -1) {\n        return {\n          idx,\n          rowIdx: parentRowIdx\n        };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return {\n          idx,\n          rowIdx: rowIdx - 1\n        };\n\n      case 'ArrowDown':\n        return {\n          idx,\n          rowIdx: rowIdx + 1\n        };\n\n      case 'ArrowLeft':\n        return {\n          idx: idx - 1,\n          rowIdx\n        };\n\n      case 'ArrowRight':\n        return {\n          idx: idx + 1,\n          rowIdx\n        };\n\n      case 'Tab':\n        return {\n          idx: idx + (shiftKey ? -1 : 1),\n          rowIdx\n        };\n\n      case 'Home':\n        if (isRowSelected) return {\n          idx,\n          rowIdx: 0\n        };\n        return {\n          idx: 0,\n          rowIdx: ctrlKey ? minRowIdx : rowIdx\n        };\n\n      case 'End':\n        if (isRowSelected) return {\n          idx,\n          rowIdx: rows.length - 1\n        };\n        return {\n          idx: maxColIdx,\n          rowIdx: ctrlKey ? maxRowIdx : rowIdx\n        };\n\n      case 'PageUp':\n        {\n          if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n          const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n          return {\n            idx,\n            rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0\n          };\n        }\n\n      case 'PageDown':\n        {\n          if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n          const nextRowY = getRowTop(rowIdx) + clientHeight;\n          return {\n            idx,\n            rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1\n          };\n        }\n\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event) {\n    if (selectedPosition.mode === 'EDIT') {\n      var _columns$selectedPosi2, _columns$selectedPosi3;\n\n      const onNavigation = (_columns$selectedPosi2 = (_columns$selectedPosi3 = columns[selectedPosition.idx].editorOptions) == null ? void 0 : _columns$selectedPosi3.onNavigation) != null ? _columns$selectedPosi2 : onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n\n    const {\n      key,\n      shiftKey\n    } = event;\n    let mode = cellNavigationMode;\n\n    if (key === 'Tab') {\n      if (canExitGrid({\n        shiftKey,\n        cellNavigationMode,\n        maxColIdx,\n        minRowIdx,\n        maxRowIdx,\n        selectedPosition\n      })) {\n        commitEditorChanges();\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    event.preventDefault();\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n\n    if (nextPosition.rowIdx === selectedPosition.rowIdx && nextPosition.idx === selectedPosition.idx) {\n      return;\n    }\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      summaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx) {\n    if (draggedOverRowIdx === undefined) return;\n    const {\n      rowIdx\n    } = selectedPosition;\n    const isDraggedOver = rowIdx < draggedOverRowIdx ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle(rowIdx) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'EDIT' || hasGroups || onFill == null) {\n      return;\n    }\n\n    return /*#__PURE__*/jsx(DragHandle, {\n      rows: rawRows,\n      columns: columns,\n      selectedPosition: selectedPosition,\n      isCellEditable: isCellEditable,\n      latestDraggedOverRowIdx: latestDraggedOverRowIdx,\n      onRowsChange: onRowsChange,\n      onFill: onFill,\n      setDragging: setDragging,\n      setDraggedOverRowIdx: setDraggedOverRowIdx\n    });\n  }\n\n  function getCellEditor(rowIdx) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n    const {\n      idx,\n      row\n    } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n    return /*#__PURE__*/jsx(EditCell, {\n      column: column,\n      colSpan: colSpan,\n      row: row,\n      onRowChange: handleEditorRowChange,\n      onClose: handleOnClose\n    }, column.key);\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n    const {\n      idx: selectedIdx,\n      rowIdx: selectedRowIdx\n    } = selectedPosition;\n    const startRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx ? rowOverscanStartIdx - 1 : rowOverscanStartIdx;\n    const endRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx ? rowOverscanEndIdx + 1 : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport = viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          rowColumns = [selectedColumn];\n        } else if (selectedRowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n          rowColumns = selectedIdx > viewportColumns[viewportColumns.length - 1].idx ? [...viewportColumns, selectedColumn] : [...viewportColumns.slice(0, lastFrozenColumnIndex + 1), selectedColumn, ...viewportColumns.slice(lastFrozenColumnIndex + 1)];\n        }\n      }\n\n      const row = rows[rowIdx];\n      const top = getRowTop(rowIdx) + headerRowHeight;\n\n      if (isGroupRow(row)) {\n        ({\n          startRowIndex\n        } = row);\n        const isGroupRowSelected = isSelectable && row.childRows.every(cr => selectedRows.has(rowKeyGetter(cr)));\n        rowElements.push( /*#__PURE__*/jsx(GroupRowRenderer, {\n          \"aria-level\": row.level + 1,\n          \"aria-setsize\": row.setSize,\n          \"aria-posinset\": row.posInSet + 1,\n          \"aria-rowindex\": headerRowsCount + startRowIndex + 1,\n          \"aria-selected\": isSelectable ? isGroupRowSelected : undefined,\n          id: row.id,\n          groupKey: row.groupKey,\n          viewportColumns: rowColumns,\n          childRows: row.childRows,\n          rowIdx: rowIdx,\n          row: row,\n          top: top,\n          height: getRowHeight(rowIdx),\n          level: row.level,\n          isExpanded: row.isExpanded,\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          isRowSelected: isGroupRowSelected,\n          selectGroup: selectGroupLatest,\n          toggleGroup: toggleGroupLatest\n        }, row.id));\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n\n      if (typeof rowKeyGetter === 'function') {\n        var _selectedRows$has;\n\n        key = rowKeyGetter(row);\n        isRowSelected = (_selectedRows$has = selectedRows == null ? void 0 : selectedRows.has(key)) != null ? _selectedRows$has : false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push( /*#__PURE__*/jsx(RowRenderer, {\n        \"aria-rowindex\": headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n        \"aria-selected\": isSelectable ? isRowSelected : undefined,\n        rowIdx: rowIdx,\n        row: row,\n        viewportColumns: rowColumns,\n        isRowSelected: isRowSelected,\n        onRowClick: onRowClick,\n        onRowDoubleClick: onRowDoubleClick,\n        rowClass: rowClass,\n        top: top,\n        height: getRowHeight(rowIdx),\n        copiedCellIdx: copiedCell !== null && copiedCell.row === row ? columns.findIndex(c => c.key === copiedCell.columnKey) : undefined,\n        selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n        draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n        setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n        lastFrozenColumnIndex: lastFrozenColumnIndex,\n        onRowChange: handleFormatterRowChangeLatest,\n        selectCell: selectViewportCellLatest,\n        selectedCellDragHandle: getDragHandle(rowIdx),\n        selectedCellEditor: getCellEditor(rowIdx)\n      }, key));\n    }\n\n    return rowElements;\n  }\n\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (selectedPosition.mode === 'EDIT' && rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n    closeEditor();\n  }\n\n  return /*#__PURE__*/jsxs(\"div\", {\n    role: hasGroups ? 'treegrid' : 'grid',\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    \"aria-multiselectable\": isSelectable ? true : undefined,\n    \"aria-colcount\": columns.length,\n    \"aria-rowcount\": headerRowsCount + rowsCount + summaryRowsCount,\n    className: clsx(rootClassname, className, isDragging && viewportDraggingClassname),\n    style: { ...style,\n      '--header-row-height': `${headerRowHeight}px`,\n      '--row-width': `${totalColumnWidth}px`,\n      '--summary-row-height': `${summaryRowHeight}px`,\n      ...layoutCssVars\n    },\n    ref: gridRef,\n    onScroll: handleScroll,\n    onKeyDown: handleKeyDown,\n    \"data-testid\": testId,\n    children: [/*#__PURE__*/jsx(HeaderRow$1, {\n      columns: viewportColumns,\n      onColumnResize: handleColumnResize,\n      allRowsSelected: allRowsSelected,\n      onAllRowsSelectionChange: selectAllRowsLatest,\n      sortColumns: sortColumns,\n      onSortColumnsChange: onSortColumnsChange,\n      lastFrozenColumnIndex: lastFrozenColumnIndex,\n      selectedCellIdx: isHeaderRowSelected ? selectedPosition.idx : undefined,\n      selectCell: selectHeaderCellLatest,\n      shouldFocusGrid: !selectedCellIsWithinSelectionBounds\n    }), rows.length === 0 && noRowsFallback ? noRowsFallback : /*#__PURE__*/jsxs(Fragment, {\n      children: [/*#__PURE__*/jsx(\"div\", {\n        style: {\n          height: max(totalRowHeight, clientHeight)\n        }\n      }), /*#__PURE__*/jsx(RowSelectionChangeProvider, {\n        value: selectRowLatest,\n        children: getViewportRows()\n      }), summaryRows == null ? void 0 : summaryRows.map((row, rowIdx) => {\n        const isSummaryRowSelected = selectedPosition.rowIdx === headerRowsCount + rows.length + rowIdx - 1;\n        return /*#__PURE__*/jsx(SummaryRow$1, {\n          \"aria-rowindex\": headerRowsCount + rowsCount + rowIdx + 1,\n          rowIdx: rowIdx,\n          row: row,\n          bottom: summaryRowHeight * (summaryRows.length - 1 - rowIdx),\n          viewportColumns: viewportColumns,\n          lastFrozenColumnIndex: lastFrozenColumnIndex,\n          selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n          selectCell: selectSummaryCellLatest\n        }, rowIdx);\n      })]\n    })]\n  });\n}\n\nconst DataGrid$1 = /*#__PURE__*/forwardRef(DataGrid);\nvar css_248z = \".t16y9g8l700-beta6{appearance:none;background-color:var(--background-color);border:2px solid #ccc;box-sizing:border-box;color:var(--color);font-family:inherit;font-size:var(--font-size);height:100%;padding:0 6px;vertical-align:top;width:100%}.t16y9g8l700-beta6:focus{border-color:var(--selection-color);outline:none}.t16y9g8l700-beta6::placeholder{color:#999;opacity:1}\";\nstyleInject(css_248z, {\n  \"insertAt\": \"top\"\n});\nconst textEditor = \"t16y9g8l700-beta6\";\nconst textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input) {\n  input == null ? void 0 : input.focus();\n  input == null ? void 0 : input.select();\n}\n\nfunction TextEditor({\n  row,\n  column,\n  onRowChange,\n  onClose\n}) {\n  return /*#__PURE__*/jsx(\"input\", {\n    className: textEditorClassname,\n    ref: autoFocusAndSelect,\n    value: row[column.key],\n    onChange: event => onRowChange({ ...row,\n      [column.key]: event.target.value\n    }),\n    onBlur: () => onClose(true)\n  });\n}\n\nexport { RowWithRef as Row, SELECT_COLUMN_KEY, SelectCellFormatter, SelectColumn, SortableHeaderCell, TextEditor, ToggleGroupFormatter, ValueFormatter, DataGrid$1 as default, useRowSelection };","map":{"version":3,"sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/style/cell.ts","../src/style/core.ts","../src/style/row.ts","../src/hooks/useLayoutEffect.ts","../src/hooks/useFocusRef.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/hooks/useRowSelection.ts","../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/Columns.tsx","../src/hooks/useCalculatedColumns.ts","../src/hooks/useCombinedRefs.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingCellRef.ts","../src/hooks/useRovingRowRef.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/headerCells/SortableHeaderCell.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/EditCell.tsx","../src/DragHandle.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"names":["cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","viewportDragging","viewportDraggingClassname","row","rowClassname","useLayoutEffect","ref","useRef","preventScroll","tabIndex","isSelected","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","ariaLabelledBy","useFocusRef","handleChange","e","onChange","clsx","disabled","onClick","props","groupCellContent","groupCellContentClassname","caret","caretClassname","toggleGroup","handleKeyDown","key","d","isExpanded","RowSelectionContext","createContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","rowSelectionContext","useContext","rowSelectionChangeContext","colSpan","column","Number","event","nonInputKeys","target","isGroupRow","columns","selectedPosition","rows","isCellEditable","rowIdx","getColSpan","type","summaryRows","currentPosition","idx","currentIdx","nextRowIdx","setColSpan","moveRight","colIdx","getSelectedCellColSpan","nextIdx","isCellWithinBounds","cellNavigationMode","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","shiftKey","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","sign","gridColumnStart","gridColumnEnd","left","undefined","SELECT_COLUMN_KEY","useRowSelection","onRowSelectionChange","isShiftClick","checked","stopPropagation","SelectColumn","name","width","maxWidth","resizable","sortable","frozen","headerRenderer","formatter","groupFormatter","SelectGroupFormatter","enableVirtualization","minColumnWidth","defaultColumnOptions","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","lastFrozenColumnIndex","rawColumn","rowGroup","rawGroupBy","isLastFrozenColumn","frozenA","frozenB","aKey","bKey","colSpanColumns","columnMetrics","totalColumnWidth","totalFrozenColumnWidth","templateColumns","allocatedWidth","unassignedColumnsCount","getSpecifiedWidth","clampColumnWidth","unallocatedWidth","viewportWidth","unallocatedColumnWidth","columnMetric","layoutCssVars","i","viewportLeft","scrollLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","min","colVisibleStartIdx","colVisibleEndIdx","colOverscanStartIdx","max","colOverscanEndIdx","columnWidths","floor","parseInt","minWidth","useCallback","handle","gridRef","useState","ResizeObserver","resizeObserver","clientHeight","setGridWidth","clientWidth","devicePixelRatio","setGridHeight","useEffect","isChildFocused","forceRender","isFocused","onFocus","rowSelected","rowSelectedClassname","selectedCellIdx","className","startIdx","updateStartIdx","viewportColumns","Array","rowGrouper","rawRows","groupRows","groupRowsCount","groups","Object","remainingGroupByKeys","childRows","startRowIndex","childRowsCount","allGroupRows","flattenedRows","expandGroup","isReadonlyArray","id","parentId","groupKey","expandedGroupIds","groupRow","setSize","keys","length","level","findRowIdx","totalRowHeight","rowHeight","getRowTop","getRowHeight","offset","rowPositions","currentRowHeight","position","top","height","validateRowIdx","start","end","middle","currentOffset","rowOverscanStartIdx","rowOverscanEndIdx","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","scrollTop","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","arrow","arrowClassname","isCellSelected","onSort","handleClick","children","sortDirection","cellResizable","cellResizableClassname","shouldFocusGrid","useRovingCellRef","sortIndex","sortColumns","sort","sortColumn","direction","priority","ariaSort","getCellClassname","onPointerDown","pointerId","right","currentTarget","clientX","onPointerMove","onColumnResize","onLostPointerCapture","ctrlClick","onSortColumnsChange","sortDescendingFirst","nextSort","columnKey","nextSortColumn","nextSortColumns","selectCell","handleFocus","getCell","getCellStyle","headerRow","headerRowClassname","useRovingRowRef","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","cellClass","isCopied","isDraggedOver","selectCellWrapper","openEditor","onRowClick","handleContextMenu","handleDoubleClick","onRowDoubleClick","onRowChange","rovingClassName","handleRowChange","useLatestFunc","newRow","setDraggedOverRowIdx","onMouseEnter","rowClass","copiedCellIdx","draggedOverCellIdx","useCombinedRefs","RowWithRef","forwardRef","toggleGroupWrapper","isLevelMatching","groupColumnIndex","cursor","groupRowClassname","handleSelectGroup","selectGroup","summaryFormatter","summaryCellClass","SummaryFormatter","summaryRow","summaryRowBorderClassname","summaryRowClassname","ariaRowIndex","bottom","cellEditing","onClose","frameRequestRef","commitOnOutsideMouseDown","cancelFrameRequest","cancelAnimationFrame","onWindowCaptureMouseDown","requestAnimationFrame","addEventListener","capture","removeEventListener","cellDragHandle","cellDragHandleClassname","handleMouseDown","setDragging","window","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","latestDraggedOverRowIdx","current","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","onFill","targetRow","onRowsChange","initialPosition","mode","headerRowHeight","summaryRowHeight","testId","rawHeaderRowHeight","rawSummaryRowHeight","RowRenderer","rowRenderer","rawCellNavigationMode","prevSelectedPosition","lastSelectedRowIdx","useGridDimensions","headerRowsCount","summaryRowsCount","gridHeight","isSelectable","selectedRows","onSelectedRowsChange","isHeaderRowSelected","allRowsSelected","rowKeyGetter","useCalculatedColumns","useViewportRows","useViewportColumns","hasGroups","minColIdx","maxColIdx","minRowIdx","maxRowIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","selectRowLatest","selectAllRowsLatest","handleFormatterRowChangeLatest","selectViewportCellLatest","selectGroupLatest","selectHeaderCellLatest","selectSummaryCellLatest","toggleGroupLatest","scrollToCell","useImperativeHandle","element","scrollToColumn","scrollToRow","behavior","handleColumnResize","setColumnWidths","newColumnWidths","setOverRowIdx","assertIsValidKeyGetter","newSelectedRows","rowKey","previousRowIdx","step","newExpandedGroupIds","onExpandedGroupIdsChange","isCellEvent","isRowEvent","keyCode","onPaste","isCtrlKeyHeldDown","cKey","vKey","handleCopy","handlePaste","isRowIdxWithinViewportBounds","setCopiedCell","closeEditor","navigate","handleCellInput","setScrollTop","setScrollLeft","onScroll","rawRowIdx","getRawRowIdx","updateRow","copiedCell","updatedTargetRow","sourceColumnKey","targetColumnKey","commitEditorChanges","selectRow","isDefaultCellInput","setSelectedPosition","originalRow","isColIdxWithinSelectionBounds","isSelectedCellEditable","enableEditor","isCellAtLeftBoundary","isCellAtRightBoundary","rowTop","isRowSelected","parentRowIdx","parentRow","ctrlKey","nextRowY","onNavigation","canExitGrid","nextPosition","getNextPosition","nextSelectedCellPosition","getNextSelectedCellPosition","draggedOverRowIdx","currentRowIdx","handleOnClose","rowElements","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","selectedColumn","selectedIdx","isGroupRowSelected","cr","c","getDraggedOverCellIdx","isDragging","getDragHandle","getCellEditor","getViewportRows","isSummaryRowSelected","textEditor","textEditorClassname","input","value"],"mappings":"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","sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding: 0 8px;\n  border-right: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n  outline: none;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nconst cellFrozen = css`\n  position: sticky;\n  /* Should have a higher value than 0 to show up above unfrozen cells */\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --color: #000;\n  --border-color: #ddd;\n  --summary-border-color: #aaa;\n  --background-color: hsl(0deg 0% 100%);\n  --header-background-color: hsl(0deg 0% 97.5%);\n  --row-hover-background-color: hsl(0deg 0% 96%);\n  --row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --checkbox-color: hsl(207deg 100% 29%);\n  --checkbox-focus-color: hsl(207deg 100% 69%);\n  --checkbox-disabled-border-color: #ccc;\n  --checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --color: #ddd;\n  --border-color: #444;\n  --summary-border-color: #555;\n  --background-color: hsl(0deg 0% 13%);\n  --header-background-color: hsl(0deg 0% 10.5%);\n  --row-hover-background-color: hsl(0deg 0% 9%);\n  --row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --checkbox-color: hsl(207deg 100% 79%);\n  --checkbox-focus-color: hsl(207deg 100% 89%);\n  --checkbox-disabled-border-color: #000;\n  --checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --selection-color: #66afe9;\n  --font-size: 14px;\n\n  color-scheme: var(--color-scheme, light dark);\n\n  /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n  /* We set a stacking context so internal elements don't render on top of external components. */\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  height: 350px;\n  border: 1px solid var(--border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--background-color);\n  color: var(--color);\n  font-size: var(--font-size);\n  direction: ltr;\n\n  /* set stacking context in safari */\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  &.rdg-dark {\n    --color-scheme: dark;\n    ${darkTheme}\n  }\n\n  &.rdg-light {\n    --color-scheme: light;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-rows: var(--row-height);\n  grid-template-columns: var(--template-columns);\n  position: absolute;\n  left: 0;\n  width: var(--row-width);\n  height: var(--row-height); /* needed on Firefox */\n  line-height: var(--row-height);\n  background-color: var(--background-color);\n\n  &:hover {\n    background-color: var(--row-hover-background-color);\n  }\n\n  &[aria-selected='true'] {\n    background-color: var(--row-selected-background-color);\n\n    &:hover {\n      background-color: var(--row-selected-hover-background-color);\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n","// eslint-disable-next-line no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  inset: 0;\n  margin-right: 1px; /* align checkbox in row group cell */\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n  width: 0;\n  margin: 0;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--border-color);\n  background-color: var(--background-color);\n\n  .${checkboxInput}:checked + & {\n    background-color: var(--checkbox-color);\n    box-shadow: inset 0px 0px 0px 4px var(--background-color);\n  }\n\n  .${checkboxInput}:focus + & {\n    border-color: var(--checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n\n  .${checkbox} {\n    border-color: var(--checkbox-disabled-border-color);\n    background-color: var(--checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\ntype SharedInputProps = Pick<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  'disabled' | 'onClick' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx(checkboxLabelClassname, { [checkboxLabelDisabledClassname]: disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        ref={ref}\n        type=\"checkbox\"\n        tabIndex={tabIndex}\n        className={checkboxInputClassname}\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-left: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  summaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'summaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  if (rowIdx === -1) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (summaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: summaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport const { min, max, floor, sign } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    left: column.frozen ? `var(--frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\nimport { stopPropagation } from './utils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onClick={stopPropagation}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n      // Stop propagation to prevent row selection\n      onClick={stopPropagation}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n        // Stop propagation to prevent row selection\n        onClick={stopPropagation}\n      />\n    );\n  },\n  formatter: SelectFormatter,\n  groupFormatter: SelectGroupFormatter\n};\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { floor, max, min } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n\n  const { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalColumnWidth: number;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalColumnWidth = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, minColumnWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    const unallocatedWidth = viewportWidth - allocatedWidth;\n    const unallocatedColumnWidth = unallocatedWidth / unassignedColumnsCount;\n\n    for (const column of columns) {\n      let width: number;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        width = clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n        columnMetrics.set(column, { width, left });\n      }\n      totalColumnWidth += width;\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      '--template-columns': templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, minColumnWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return floor((viewportWidth * parseInt(width, 10)) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useCallback } from 'react';\n\nexport function useCombinedRefs<T>(...refs: readonly React.Ref<T>[]) {\n  return useCallback(\n    (handle: T | null) => {\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(handle);\n        } else if (ref !== null && 'current' in ref) {\n          // @ts-expect-error: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065\n          ref.current = handle;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs\n  );\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      const { clientWidth, clientHeight } = gridRef.current!;\n      // TODO: remove once fixed upstream\n      // we reduce width by 1px here to avoid layout issues in Chrome\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\n      setGridWidth(clientWidth - (devicePixelRatio % 1 === 0 ? 0 : 1));\n      setGridHeight(clientHeight);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  const ref = useRef<HTMLDivElement>(null);\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const isChildFocused = useRef(false);\n  const [, forceRender] = useState<unknown>({});\n\n  useLayoutEffect(() => {\n    if (!isSelected) {\n      isChildFocused.current = false;\n      return;\n    }\n\n    if (isChildFocused.current) {\n      // When the child is focused, we need to rerender\n      // the cell again so tabIndex is updated to -1\n      forceRender({});\n      return;\n    }\n    ref.current?.focus();\n  }, [isSelected]);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== ref.current) {\n      isChildFocused.current = true;\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused.current;\n\n  return {\n    ref,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { cell } from '../style';\nimport { useFocusRef } from './useFocusRef';\n\nconst rowSelected = css`\n  outline: none;\n\n  &::after {\n    content: '';\n    position: absolute;\n    inset: 0;\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n    pointer-events: none;\n    z-index: 2;\n  }\n\n  > .${cell}:first-child {\n    /* preserve left border on the first frozen cell after scrolling to the right */\n    box-shadow: inset 2px 0 0 0 var(--selection-color);\n  }\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected ${rowSelected}`;\n\nexport function useRovingRowRef(selectedCellIdx: number | undefined) {\n  const isSelected = selectedCellIdx === -1;\n  const { ref, tabIndex } = useFocusRef<HTMLDivElement>(isSelected);\n\n  return {\n    ref,\n    tabIndex,\n    className: isSelected ? rowSelectedClassname : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (summaryRows != null) {\n        for (const row of summaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  if (!enableVirtualization) {\n    return {\n      rowOverscanStartIdx: 0,\n      rowOverscanEndIdx: rows.length - 1,\n      rows,\n      rowsCount,\n      totalRowHeight,\n      isGroupRow,\n      getRowTop,\n      getRowHeight,\n      findRowIdx\n    };\n  }\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = findRowIdx(scrollTop);\n  const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n  const rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n  const rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks';\nimport type { HeaderRendererProps } from '../types';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nconst arrow = css`\n  fill: currentColor;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: Props<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>\n        {sortDirection !== undefined && (\n          <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n            <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n          </svg>\n        )}\n        {priority}\n      </span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport { getCellStyle, getCellClassname } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  touch-action: none;\n\n  &::after {\n    content: '';\n    cursor: col-resize;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 10px;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid\n}: HeaderCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onColumnResize(column, width);\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortDirection={sortDirection}\n          priority={priority}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n          isCellSelected={isCellSelected}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell\n          onSort={onSort}\n          sortDirection={sortDirection}\n          priority={priority}\n          isCellSelected={isCellSelected}\n        >\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {getCell()}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { getColSpan } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { useRovingRowRef } from './hooks';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n}\n\nconst headerRow = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-columns: var(--template-columns);\n  grid-template-rows: var(--header-row-height);\n  height: var(--header-row-height); /* needed on Firefox */\n  line-height: var(--header-row-height);\n  width: var(--row-width);\n  position: sticky;\n  top: 0;\n  background-color: var(--header-background-color);\n  font-weight: bold;\n  z-index: 3;\n  outline: none;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid\n}: HeaderRowProps<R, SR, K>) {\n  const { ref, tabIndex, className } = useRovingRowRef(selectedCellIdx);\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      ref={ref}\n      tabIndex={tabIndex}\n      className={clsx(headerRowClassname, className)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            row={row}\n            isCellSelected={isCellSelected}\n            onRowChange={onRowChange}\n          />\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes, CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc, useCombinedRefs, useRovingRowRef } from './hooks';\nimport { getColSpan } from './utils';\nimport { rowClassname } from './style';\nimport type { RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    top,\n    height,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const { ref: rowRef, tabIndex, className: rovingClassName } = useRovingRowRef(selectedCellIdx);\n\n  const handleRowChange = useLatestFunc((newRow: R) => {\n    onRowChange(rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    rovingClassName,\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={useCombinedRefs(ref, rowRef)}\n        tabIndex={tabIndex}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={\n          {\n            top,\n            '--row-height': `${height}px`\n          } as unknown as CSSProperties\n        }\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(Row) as <R, SR>(props: RowRendererProps<R, SR>) => JSX.Element;\n\nexport const RowWithRef = memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          row={row}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import type { CSSProperties } from 'react';\nimport { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider, useRovingRowRef } from './hooks';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  top: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  &:not([aria-selected='true']) {\n    background-color: var(--header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-right: none;\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  top,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  const { ref, tabIndex, className } = useRovingRowRef(selectedCellIdx);\n\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        ref={ref}\n        tabIndex={tabIndex}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={\n          {\n            top,\n            '--row-height': `${height}px`\n          } as unknown as CSSProperties\n        }\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {SummaryFormatter && (\n        <SummaryFormatter column={column} row={row} isCellSelected={isCellSelected} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, row, rowClassname } from './style';\nimport { getColSpan } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\nimport { useRovingRowRef } from './hooks';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>, 'viewportColumns' | 'rowIdx'>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  &.${row} {\n    position: sticky;\n    z-index: 3;\n    grid-template-rows: var(--summary-row-height);\n    height: var(--summary-row-height); /* needed on Firefox */\n    line-height: var(--summary-row-height);\n  }\n`;\n\nconst summaryRowBorderClassname = css`\n  & > .${cell} {\n    border-top: 2px solid var(--summary-border-color);\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const { ref, tabIndex, className } = useRovingRowRef(selectedCellIdx);\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        { [summaryRowBorderClassname]: rowIdx === 0 },\n        className\n      )}\n      style={{ bottom }}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps, EditorProps } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  &.rdg-cell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR> extends EditorProps<R, SR>, SharedCellRendererProps<R, SR> {}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  onClose\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onRowChange(row, true);\n  });\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  useEffect(() => {\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideMouseDown]);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.editor != null && (\n        <>\n          <column.editor column={column} row={row} onRowChange={onRowChange} onClose={onClose} />\n          {column.editorOptions?.renderFormatter && (\n            <column.formatter column={column} row={row} isCellSelected onRowChange={onRowChange} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 8px;\n  height: 8px;\n  background-color: var(--selection-color);\n\n  &:hover {\n    width: 16px;\n    height: 16px;\n    border: 2px solid var(--selection-color);\n    background-color: var(--background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { rootClassname, viewportDraggingClassname } from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport {\n  assertIsValidKeyGetter,\n  onEditorNavigation,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  max,\n  sign,\n  getSelectedCellColSpan\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowRendererProps,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'minWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  rowRenderer?: Maybe<React.ComponentType<RowRendererProps<R, SR>>>;\n  noRowsFallback?: React.ReactNode;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    summaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    // Miscellaneous\n    rowRenderer,\n    noRowsFallback,\n    className,\n    style,\n    rowClass,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const RowRenderer = rowRenderer ?? Row;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isHeaderRowSelected = selectedPosition.rowIdx === -1;\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1; // change it to 0?\n  const maxRowIdx = headerRowsCount + rows.length + summaryRowsCount - 2;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: -1, idx });\n  });\n  const selectSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = summaryRows!.indexOf(summaryRow) + headerRowsCount + rows.length - 1;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      selectedPosition === prevSelectedPosition.current ||\n      selectedPosition.mode === 'EDIT'\n    ) {\n      return;\n    }\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number) => {\n      setColumnWidths((columnWidths) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target.matches('.rdg-row, .rdg-header-row');\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      onPaste != null &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === 'ArrowLeft' && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === 'ArrowRight' && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (\n      columns[selectedPosition.idx]?.editor == null ||\n      selectedPosition.mode === 'SELECT' ||\n      selectedPosition.row === selectedPosition.originalRow\n    ) {\n      return;\n    }\n\n    updateRow(selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    setCopiedCell({ row: rawRows[getRawRowIdx(rowIdx)], columnKey: columns[idx].key });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditorChanges();\n        closeEditor();\n      }\n      return;\n    }\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleEditorRowChange(row: R, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      updateRow(selectedPosition.rowIdx, row);\n      closeEditor();\n    } else {\n      setSelectedPosition((position) => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (\n      selectedPosition.mode !== 'SELECT' ||\n      selectedPosition.idx !== position.idx ||\n      selectedPosition.rowIdx !== position.rowIdx\n    ) {\n      // Avoid re-renders if the selected cell state is the same\n      // TODO: replace with a #record? https://github.com/microsoft/TypeScript/issues/39831\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      rowIdx ??= selectedPosition.rowIdx;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = left - totalFrozenColumnWidth;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = right - clientWidth;\n      }\n    }\n\n    if (typeof rowIdx === 'number' && isRowIdxWithinViewportBounds(rowIdx)) {\n      const rowTop = getRowTop(rowIdx);\n      const rowHeight = getRowHeight(rowIdx);\n      if (rowTop < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowTop;\n      } else if (rowTop + rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = rowTop + rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft' &&\n      isRowSelected &&\n      isGroupRow(row) &&\n      !row.isExpanded &&\n      row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (selectedPosition.mode === 'EDIT') {\n      const onNavigation =\n        columns[selectedPosition.idx].editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (\n      nextPosition.rowIdx === selectedPosition.rowIdx &&\n      nextPosition.idx === selectedPosition.idx\n    ) {\n      return;\n    }\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      summaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={handleEditorRowChange}\n        onClose={handleOnClose}\n      />\n    );\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else if (selectedRowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns =\n            selectedIdx > viewportColumns[viewportColumns.length - 1].idx\n              ? [...viewportColumns, selectedColumn]\n              : [\n                  ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n                  selectedColumn,\n                  ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n                ];\n        }\n      }\n\n      const row = rows[rowIdx];\n      const top = getRowTop(rowIdx) + headerRowHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            top={top}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={rowColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          rowClass={rowClass}\n          top={top}\n          height={getRowHeight(rowIdx)}\n          copiedCellIdx={\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined\n          }\n          selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          onRowChange={handleFormatterRowChangeLatest}\n          selectCell={selectViewportCellLatest}\n          selectedCellDragHandle={getDragHandle(rowIdx)}\n          selectedCellEditor={getCellEditor(rowIdx)}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (\n    selectedPosition.mode === 'EDIT' &&\n    rows[selectedPosition.rowIdx] !== selectedPosition.originalRow\n  ) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(rootClassname, { [viewportDraggingClassname]: isDragging }, className)}\n      style={\n        {\n          ...style,\n          '--header-row-height': `${headerRowHeight}px`,\n          '--row-width': `${totalColumnWidth}px`,\n          '--summary-row-height': `${summaryRowHeight}px`,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      <HeaderRow\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={selectAllRowsLatest}\n        sortColumns={sortColumns}\n        onSortColumnsChange={onSortColumnsChange}\n        lastFrozenColumnIndex={lastFrozenColumnIndex}\n        selectedCellIdx={isHeaderRowSelected ? selectedPosition.idx : undefined}\n        selectCell={selectHeaderCellLatest}\n        shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n      />\n      {rows.length === 0 && noRowsFallback ? (\n        noRowsFallback\n      ) : (\n        <>\n          <div style={{ height: max(totalRowHeight, clientHeight) }} />\n          <RowSelectionChangeProvider value={selectRowLatest}>\n            {getViewportRows()}\n          </RowSelectionChangeProvider>\n          {summaryRows?.map((row, rowIdx) => {\n            const isSummaryRowSelected =\n              selectedPosition.rowIdx === headerRowsCount + rows.length + rowIdx - 1;\n            return (\n              <SummaryRow\n                aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n                key={rowIdx}\n                rowIdx={rowIdx}\n                row={row}\n                bottom={summaryRowHeight * (summaryRows.length - 1 - rowIdx)}\n                viewportColumns={viewportColumns}\n                lastFrozenColumnIndex={lastFrozenColumnIndex}\n                selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                selectCell={selectSummaryCellLatest}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding: 0px 6px 0 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--color);\n  background-color: var(--background-color);\n\n  font-family: inherit;\n  font-size: var(--font-size);\n\n  &:focus {\n    border-color: var(--selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}